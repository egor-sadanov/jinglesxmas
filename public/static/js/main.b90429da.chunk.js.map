{"version":3,"sources":["treesForm/trees.js","colorConsts.js","treesForm/treeTile/styles.js","treesForm/treeTile/index.js","treesForm/checkbox/styles.js","treesForm/checkbox/index.js","treesForm/datesField/styles.js","treesForm/datesField/index.js","treesForm/postCodeInput/styles.js","treesForm/postCodeInput/index.js","treesForm/couponInput/styles.js","treesForm/couponInput/index.js","treesForm/additionalItems.js","treesForm/zones.js","treesForm/styles.js","treesForm/index.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["STANDARD_TREE_NAME","LARGE_TREE_NAME","TREES","name","height","price","key","selected","discounts","code","value","productKeys","RED","CTA","DARK_GREEN","YELLOW","treeTile","css","activeClass","bigTree","treeHeight","title","hr","TreeTile","tree","selectTree","discount","tilesClasses","classNames","styles","trees","displayPrice","className","onClick","input","Checkbox","type","checked","disabled","onChange","calendar","DatesField","props","isBlocked","availableDays","day","find","d","date","deliveryDate","state","focused","daySize","onDateChange","bind","onFocusChange","window","addEventListener","this","resize","newSize","innerWidth","setState","removeEventListener","prevProps","onDeliveryDateChange","numberOfMonths","initialVisibleMonth","moment","isDayBlocked","noNavButtons","hideKeyboardShortcutsPanel","React","Component","postcode","label","error","PostCodeInput","handleChange","event","number","Number","target","onPostCodeChange","isNaN","valid","isMissingPostcode","postCodeEnum","postcodes","c","areaSurcharge","zone","pattern","maxLength","minLength","placeholder","href","CouponInput","coupon","onCouponChange","STAND_KEY","INSTALLATION_KEY","ADDITIONAL_ITEMS","large","REMOTE_AREA_SURCHARGE","ZONES","C2","availableDates","SE","SE1","N","N1","WN","WN1","S","S1","W","W1","fetchPostCodesFromJson","postcodes_json","dates_json","datesJson","dates","startsWith","month","todayDay","filter","getFutureDays","console","dir","map","p","surcharge","tilesWpap","checkboxesWpap","checkboxLabel","h2","boxWpap","cta","subTextGreen","surchargeMessage","installationMessage","TreesForm","defaultTree","defaultAdditionalSelection","selectedTree","checkedItemsSet","Set","disabledItemsSet","total","dateSurcharge","postCode","isFormValid","formErrorMessage","onAdditionalItemsChange","onSubmit","item","getTotal","checkedItems","additinalItemsPrice","reduce","sum","isAddedItemLargeStand","newDeliveryDate","newDateSurcharge","e","isShowInstallationMessage","itemKey","isChecked","i","add","delete","isShowInstallMessage","checkInstallation","includes","installation","slice","preventDefault","log","addOns","deliveryDay","area","deliveryPrice","treesList","checkboxes","labelText","getLabelText","isShowMessage","has","method","action","formatTree","formatAdditionalItemsNames","formatDate","formatArea","formatZone","formatDeliveryPrice","pageWpap","specialOffer","subTextRed","h1","car","App","done","undefined","setTimeout","anchor","document","getElementsByName","scrollIntoView","behavior","scrollToForm","userName","classNameLoading","limit","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b90429da.chunk.js","sourcesContent":["export const STANDARD_TREE_NAME = 'Standard'\nexport const LARGE_TREE_NAME = 'Large'\n\n// prod_IJj7l2rVzMfaXC\tTree 6\n// prod_IJj4eyw0urKfb1\tTree 7\n\n// Standard Discounted prod_IL2qKR5rBwNHo8 \n// Large Discounted prod_IL30KubFVJZaBg\n\n\n// Large Tree ($5 off) - prod_IMZ4MfdgHl1Arc  \n// Standard Tree ($5 off)  -  prod_IMZQpyUW26xFJu\n// Large Tree ($10 off) - prod_IMZVSevdvYURl4  \n// Standard Tree ($10 off)  -  prod_IMZSHZxRhdKwmc\n\nexport const TREES = [{\n        name: STANDARD_TREE_NAME,\n        height: '1.8m',\n        price: 109,\n        key: 'prod_IJj7l2rVzMfaXC',\n        selected: true,\n    },{\n        name: LARGE_TREE_NAME,\n        height: '2.1m',\n        price: 139,\n        key: 'prod_IJj4eyw0urKfb1',\n    }]\n\n\nexport const discounts = [\n    {\n        code: 'JINGLES2020',\n        value: 20,\n        productKeys: { \n            [STANDARD_TREE_NAME] : 'prod_IL2qKR5rBwNHo8',\n            [LARGE_TREE_NAME]: 'prod_IL30KubFVJZaBg',\n            }\n    }, {\n        code: 'HAPPY2021',\n        value: 10,\n        productKeys: {\n            [STANDARD_TREE_NAME] : 'prod_IMZSHZxRhdKwmc', \n            [LARGE_TREE_NAME]: 'prod_IMZVSevdvYURl4',\n        }\n    }, {\n        code: 'ELFSGIFT5',\n        value: 5,\n        productKeys: {\n            [STANDARD_TREE_NAME] :'prod_IMZQpyUW26xFJu', \n            [LARGE_TREE_NAME]: 'prod_IMZ4MfdgHl1Arc',\n        }\n    }, {\n        code: 'MARINE',\n        value: 5,\n        productKeys: {\n            [STANDARD_TREE_NAME] :'prod_IMZQpyUW26xFJu', \n            [LARGE_TREE_NAME]: 'prod_IMZ4MfdgHl1Arc',\n        }\n    }, {\n        code: 'NEPEAN',\n        value: 5,\n        productKeys: {\n            [STANDARD_TREE_NAME] :'prod_IMZQpyUW26xFJu', \n            [LARGE_TREE_NAME]: 'prod_IMZ4MfdgHl1Arc',\n        }\n    }\n]","export const RED = '#ff1212'\nexport const PALE_GREEN = '#f4f5eb'\nexport const CTA = '#6e9366'\nexport const DARK_GREEN = '#2b4432'\nexport const YELLOW = '#ffffa5'\n\n","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const treeTile = css`\n  width: 46%;\n  background-color: #fdecd3;\n  padding: .5em 0 .5em 2.6em;\n  box-sizing: border-box;\n  border-radius: 6px;\n  box-shadow: 2px 2px 2px #ddd;\n  text-align: center;\n  font-size: 1em;\n  margin: 0.5em;\n\n  background-image: url(\"./images/tree_card.png\"); \n  background-repeat: no-repeat;\n  background-size: 2.6em;\n  background-position: left 1em bottom .4em;\n\n  @media (min-width: 375px) {\n    font-size: 1.1em;\n  }\n\n  @media (min-width: 768px) {\n    background-position: left 1.2em bottom .4em;\n    width: 300px;\n    margin: 1em;\n  }\n`\n\nexport const activeClass = css`\n  border: 1px solid ${RED};\n  label {\n    font-weight: 600;\n  }\n`\n\nexport const bigTree = css`\n  background-size: 3.1em;\n`\n\nexport const treeHeight = css`\n  font-size: 1em;\n  line-height: 1.1em;\n  color: ${RED};\n`\n\nexport const price = css`\n  font-size: 1em;\n  line-height: 1.1em;\n`\n\nexport const title = css`\n  color: ${RED};\n  font-weight: 500;\n\n  font-size: 18px;\n\n  @media (min-width: 375px) {\n    font-size: 20px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.4em;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n  margin: 0 20px;\n\n  @media (min-width: 375px) {\n    margin: 0 40px;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 4em;\n  }\n`","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport * as trees from '../trees'\nimport * as styles from './styles'\n\nexport const TreeTile = ({ tree = {}, selectTree, discount }) => {\n\n  const {\n    name,\n    height = '',\n    price = '',\n    selected,\n  } = tree\n\n  let tilesClasses = classNames({\n    [styles.treeTile] : true,\n    [styles.activeClass] : !!selected,\n    [styles.bigTree]: name === trees.LARGE_TREE_NAME,\n  })\n\n  const displayPrice = price - ((discount && discount.value) || 0) \n\n  return (\n    <>\n      <div className={tilesClasses} \n          onClick={() => { selectTree(tree) }}\n      >\n        <label className={styles.title}>{name}</label>\n        <div className={styles.treeHeight} >{height}</div>\n        <hr className={styles.hr}/>\n        <div className={styles.price} >{`$${displayPrice}`}</div>\n      </div>\n    </>\n  )\n}\n\nexport default TreeTile\n\nTreeTile.propTypes = {\n  tree: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  selectTree: PropTypes.func,\n  discount: PropTypes.shape({\n    value: PropTypes.number,\n  }),\n}\n","import { css } from 'emotion'\n\nexport const input = css`\n  margin-right: 0.4em;\n`\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nconst Checkbox = ({ \n  type = 'checkbox', \n  name, \n  checked = false, \n  disabled = false,\n  onChange,\n}) => { \n  return (\n    <input \n      className={styles.input}\n      type={type} \n      name={name} \n      checked={checked} \n      disabled={disabled}\n      onChange={onChange} \n    />\n  )\n}\n\n\nCheckbox.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Checkbox","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const datesSelect = css`\n  border: 1px solid ${CTA};\n  color: ${RED} !important;\n  line-height: 1.3;\n  padding: .6em 1.4em .5em .8em;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto 1em;\n  border: 1px solid #aaa;\n  box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n  border-radius: .5em;\n\n  @media (min-width: 768px) {\n    width: 80%;\n    max-width: 80%;\n  }\n\n`\n\nexport const calendar = css`\n  \n  * {\n    font-size: 16px;\n  }\n    td.CalendarDay__selected, \n    td.CalendarDay__selected:active, \n    td.CalendarDay__selected:hover {\n        border: 1px double ${CTA} !important;\n        background: ${CTA} !important;\n    }\n\n    .DayPicker {\n        margin: .6em auto 1em;\n    }\n\n    label {\n        color: ${CTA};\n        font-family: 'IM Fell DW Pica SC', serif;\n        margin: .6em auto;\n        font-size: 1.4em;\n    }\n\n    margin: 1em auto 0;\n    text-align: center;\n\n`\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { DayPickerSingleDateController } from 'react-dates'\nimport moment from 'moment'\nimport * as styles from './styles'\n\nexport default class DatesField extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const { deliveryDate } = this.props\n\n    this.state = {\n      date: deliveryDate,\n      focused: true,\n      daySize: 35,\n    }\n\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    const { daySize } = this.state\n    let newSize = daySize\n    if ( window.innerWidth <= 325 ) {\n      newSize = 29\n    } else if ( window.innerWidth < 400 ) {\n      newSize = 35\n    } else {\n      newSize = 39\n    }\n    \n    if (daySize === newSize) {\n      return\n    }\n    this.setState({ daySize: newSize })\n  }\n\n  componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.deliveryDate !== prevProps.deliveryDate) {\n      this.setState({ \n        date: this.props.deliveryDate\n      })\n    }\n  }\n\n  onDateChange(date) {\n    const { onDeliveryDateChange } = this.props\n    onDeliveryDateChange(date)\n    this.setState({ date })\n  }\n\n  onFocusChange() {\n    // Force the focused states to always be truthy so that date is always selectable\n    this.setState({ focused: true })\n  }\n\n  isBlocked = (availableDays, day) => {\n    return !availableDays.find(d => d === day.date())\n  }\n\n  render() {\n    const { focused, daySize, date } = this.state\n    const { availableDays = [] } = this.props\n    const isDayBlocked = (day) => this.isBlocked(availableDays, day)\n    return (\n      <div className={styles.calendar}>\n        <label>Delivery Date</label>\n        <DayPickerSingleDateController\n          numberOfMonths={1} \n          focused={focused}\n          date={date}\n          daySize={daySize}\n          initialVisibleMonth={() => moment('12 2020', 'MM YYYY')}\n          isDayBlocked={isDayBlocked}\n          noNavButtons={true}\n          hideKeyboardShortcutsPanel={true}\n          onDateChange={this.onDateChange}\n          onFocusChange={this.onFocusChange}\n        />\n        \n      </div>\n    );\n    }\n  }\n  \n  DatesField.propTypes = {\n    onDeliveryDateChange: PropTypes.func.isRequired,\n    availableDays: PropTypes.array,\n    deliveryDate: PropTypes.shape(),\n  }\n  ","import { css } from 'emotion'\nimport { CTA, DARK_GREEN } from '../../colorConsts'\n\nexport const postcode = css`\n  border: 1px solid ${CTA};\n  \n  font-size: 1.2em;\n  line-height: 1.2em;\n  padding: .4em 1.2em .3em .6em;\n  width: 7em;\n  max-width: 80%;\n  box-sizing: border-box;\n  margin: .8em auto 0;\n  border-radius: 6px;\n\n`\n\nexport const label = css`\n  color: ${CTA};\n  font-family: 'IM Fell DW Pica SC', serif !important;\n  box-sizing: border-box;\n  margin: .8em 0.4em 0;\n  width: 6em;\n  font-size: 1.4em;\n  line-height: 2em;\n\n`\n\nexport const error = css`\n  color: ${DARK_GREEN};\n  font-size: 16px;\n  line-height: 18px;\n  margin: 1em 0;\n\n  @media (min-width: 400px) {\n    font-size: 20px;\n    line-height: 22px;\n  }\n  \n  @media (min-width: 768px) {\n    font-size: 1.1em;\n    line-height: 1.2em;\n    margin: .5em 0;\n  }\n\n  * {\n    font-size: 1em;\n  }\n`\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nexport default class PostCodeInput extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      valid: true,\n      isMissingPostcode: false,\n      areaSurcharge: false,\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange = (event) => {\n    const number = Number(event.target.value)\n    const { onPostCodeChange } = this.props\n    if (isNaN(number)) {\n      return\n    } \n\n    const valid = (number/1000 | 0) === 3\n\n    let isMissingPostcode = false\n    const { postcodes } = this.props\n    const postCodeEnum = postcodes.find(c => c.code === number) \n    if(valid) {\n      isMissingPostcode = !postCodeEnum\n    }\n    const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n    onPostCodeChange(number, valid)\n    this.setState({ \n      value: number,\n      valid,\n      isMissingPostcode,\n      areaSurcharge,\n    })\n  }\n  \n    render() {\n      const { valid, value, isMissingPostcode, areaSurcharge } = this.state\n  \n      return (\n        <>\n          <label className={styles.label}>Postcode</label>\n          <input \n            className={styles.postcode}\n            type=\"text\" pattern=\"[0-9]{4}\"\n            maxLength={4} minLength={4}\n            placeholder=\"3000\"\n            name=\"postcode\" value={value} \n            onChange={this.handleChange.bind(this)}\n          />\n          {areaSurcharge && (\n            <p className={styles.error}>\n              Delivery area surcharge of ${areaSurcharge} has been applied for selected postcode.\n            </p>\n          )}\n          {!valid && (\n            <p className={styles.error}>\n              Please enter a valid Victorian postcode.\n            </p>\n          )}\n          {isMissingPostcode && (\n            <p className={styles.error}>\n              {`Oops! It looks like ${value} is out of our delivery range, please call us on `}\n                <a href=\"tel:0411399607\">0411399607</a>\n              {` for delivery quote to your area.`}\n          </p>\n          )}\n        </>\n      )\n    }\n  }\n\n  PostCodeInput.propTypes = {\n    onPostCodeChange: PropTypes.func.isRequired,\n  }","import { css } from 'emotion'\nimport { CTA, DARK_GREEN } from '../../colorConsts'\n\nexport const postcode = css`\n  border: 1px solid ${CTA};\n  \n  font-size: 1.2em;\n  line-height: 1.2em;\n  padding: .4em 1.2em .3em .6em;\n  width: 8em;\n  max-width: 80%;\n  box-sizing: border-box;\n  margin: .8em auto 1em;\n  border-radius: 6px;\n\n`\n\nexport const label = css`\n  color: ${CTA};\n  font-family: 'IM Fell DW Pica SC', serif !important;\n  box-sizing: border-box;\n  margin: .8em 0.4em 1em;\n  width: 6em;\n  font-size: 1.4em;\n  line-height: 2em;\n\n`\n\nexport const error = css`\n  color: ${DARK_GREEN};\n  font-size: 16px;\n  line-height: 18px;\n  margin: 0 0 1em;\n\n  @media (min-width: 400px) {\n    font-size: 20px;\n    line-height: 22px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.1em;\n    line-height: 1.2em;\n    margin: 0 0 .5em;\n  }\n\n`\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { discounts } from '../trees'\nimport * as styles from './styles'\n\n\nexport default class CouponInput extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      discount: {},\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n    handleChange = (event) => {\n      const coupon = event.target.value\n      const { onCouponChange } = this.props\n\n      const discount = discounts.find(d => d.code === coupon)\n      onCouponChange(discount)\n\n      this.setState({ \n        value: coupon,\n        discount,\n      })\n    }\n  \n    render() {\n      const { value, discount } = this.state\n  \n      return (\n        <>\n          <label className={styles.label}>Coupon</label>\n          <input \n            className={styles.postcode}\n            type=\"text\" \n            placeholder=\"coupon\"\n            name=\"coupon\" value={value} \n            onChange={this.handleChange.bind(this)}\n          />\n          {!!(discount && discount.value) && (\n            <p className={styles.error}>\n              {`Discount of $${discount.value} has been applied.`}\n            </p>\n          )}\n        </>\n      )\n    }\n  }\n  \n  CouponInput.propTypes = {\n    onCouponChange: PropTypes.func.isRequired,\n  }","export const STAND_KEY = 'cincostand'\nexport const INSTALLATION_KEY = 'installation'\n\n// prod_IJw75RnppIFZpM\tTree Installtion\n// prod_IJj83NN3LTVrfV\tTree Preservative\n// prod_IJj8xejfYwloc6\tWatering Kit\n// prod_IJj8Dz3eLUcKTJ\tTree Disposal\n// prod_IJj7tjbVfgty7J\tCinco Stand\n// prod_IJj4MpVfOHsjuG\tLarge Cinco Stand\n\nexport const ADDITIONAL_ITEMS = [{\n        name: 'prod_IJj7tjbVfgty7J',\n        key: STAND_KEY,\n        label: 'Cinco Stand',\n        price: 45,\n        large: {\n          name: 'prod_IJj4MpVfOHsjuG',\n          key: 'largecincostand',\n          label: 'Large Cinco Stand',\n          price: 60,\n        },\n      },\n      {\n        name: 'prod_IJw75RnppIFZpM',\n        key: INSTALLATION_KEY,\n        label: 'Installation',\n        price: 20,\n      },\n      {\n        name: 'prod_IJj8xejfYwloc6',\n        key: 'wateringkit',\n        label: 'Watering Kit',\n        price: 25,\n      },\n      {\n        name: 'prod_IJj8Dz3eLUcKTJ',\n        key: 'disposal',\n        label: 'Disposal',\n        price: 15,\n      },\n      {\n        name: 'prod_IJj83NN3LTVrfV',\n        key: 'preservative',\n        label: 'Preservative',\n        price: 5,\n      },\n]","import moment from 'moment'\nimport * as postcodes_json from './zones.json'\nimport * as dates_json from './availableDates.json'\n\nexport const WEEKEND_SURCHARGE = 15\nexport const REMOTE_AREA_SURCHARGE = 15\nexport const CBD_SURCHARGE = 40\n\n/*\nCITY\tThursday\t3,5,6,10,12,13,17,19,20\nNORTH\tWednesday\t2,5,6,9,12,13,16,19,20\nWEST\tThursday\t3,5,6,10,12,13,17,19,20\nWEST/NORTH\tWednesday, Thursday\t2,3,5,6,8,9,12,13,16,17,19,20\nSOUTH/EAST\tMonday, Tuesday\t5,6,7,8,12,13,14,15,19,20\nSOUTH\tMonday, Tuesday, Friday\t4,5,6,7,8,11,12,13,14,15,18,19,20\n*/\nexport const ZONES = {\n    C2 : {\n        name: 'C2',\n        areaSurcharge: CBD_SURCHARGE,\n        availableDates: [],\n    },\n    SE : {\n        name: 'SE',\n        areaSurcharge: false,\n        availableDates: [],\n    },\n    SE1 : {\n        name: 'SE1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [],\n    },\n    N : {\n        name: 'N',\n        areaSurcharge: false,\n        availableDates: [],\n    },\n    N1 : {\n        name: 'N1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [],\n    },\n    WN : {\n        name: 'WN',\n        areaSurcharge: false,\n        availableDates: [],\n    },\n    WN1 : {\n        name: 'WN1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [],\n    },\n    S : {\n        name: 'S',\n        areaSurcharge: false,\n        availableDates: [],\n    },\n    S1 : {\n        name: 'S1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [],\n    },\n    W : {\n        name: 'W',\n        areaSurcharge: false,\n        availableDates: [],\n    },\n    W1 : {\n        name: 'W1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [],\n    },\n}\n\n/**\n * Checks todays date. \n * If it's December, returns a new array with only days after today.\n * Else returns the initial array without modifying.\n */\nconst getFutureDays = (availableDates) => {\n    const todayMonth = moment().month()\n    //dec=11\n    if (todayMonth !== 11) { \n        return availableDates\n    }\n    const todayDay = moment().date()\n    const futureAvailableDates = availableDates.filter(d => d > todayDay)\n    return futureAvailableDates\n}\n/**\n * reads postcodes from a Json file.\n * returns an array of postcodes, each element is in form\n * {\n    code: 3000,\n    zone: ZONES.C1\n}\n */\nexport const fetchPostCodesFromJson = () => {\n    if (!postcodes_json) {\n        return\n    }\n    // \"zone\": \"C\",\n    // \"availableDates\": [3,5,6,10,12,13,17,19,20]\n    if (dates_json) {\n        const datesJson = dates_json.default\n        for (let zone in ZONES) {\n            const dates = datesJson.find(d => ZONES[zone].name.startsWith(d.zone))\n            ZONES[zone].availableDates = dates ? getFutureDays(dates.availableDates) : []\n        }\n    }\n    \n    console.dir(ZONES)\n    const postcodes = postcodes_json.default.map(p => {\n        return {\n            code: p.postcode,\n            zone: ZONES[`${p.zone}${!!p.surcharge ? p.surcharge : ''}`]\n        }\n    })\n    return postcodes\n}","import { css } from 'emotion'\nimport { RED, PALE_GREEN, CTA, DARK_GREEN } from '../colorConsts'\n\nexport const tilesWpap = css`\n  padding: 8px 0;\n  display: flex;\n  justify-content: center;\n  margin: 0 auto;\n\n  @media (min-width: 768px) {\n\n  }\n`\n\nexport const checkboxesWpap = css`\n  margin: 0 0 1em;\n  text-align: left;\n`\n\nexport const checkboxLabel = css`\n  color: ${RED};\n  overflow: visible;\n  white-space: nowrap;\n  font-size: 1.1em;\n  line-height: 1.4em;\n  font-weight: 600;\n  width: 11em;\n  margin: 0 0 0 4em;\n\n  @media (min-width: 400px) {\n    font-size: 1.4em;\n    line-height: 1.6em;\n    margin: 0 0 0 4.5em;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 0 0 8em;\n    font-weight: 500;\n    line-height: 1.4em;\n    width: 9em;\n  }\n\n  span {\n    color: #666;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n`\n\n\nexport const h2 = css`\n  color: ${CTA};\n  font-family: 'IM Fell DW Pica SC', 'Open sans', serif !important;\n  text-transform: none;\n  line-height: 1.1em;\n  margin: 0 auto 0.4em;\n  font-weight: 500;\n`\n\nexport const boxWpap = css`\n  padding: 1em;\n  text-align: center;\n  border: 1px solid green;\n  background-color: ${PALE_GREEN};\n  margin: 1em auto 0;\n\n  @media (min-width: 768px) {\n    width: 540px;\n  }\n  \n`\n\nexport const cta = css`\n  width: 100%;\n  margin: 1em auto;\n  background-color: ${CTA};\n  font-size: 1.2em;\n\n  :active, :hover, :visited, :focus {\n    background-color: ${CTA};\n  }\n\n  :disabled {\n    background-color: #aaa;\n  }\n\n  @media (min-width: 768px) {\n    margin: 1em auto;\n    width: 12em;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: .8em auto 0;\n  font-size: 16px;\n  line-height: 18px;\n  \n  @media (min-width: 400px) {\n    font-size: 20px;\n    line-height: 22px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.1em;\n    line-height: 1.2em;\n  }\n`\n\nexport const surchargeMessage = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: .8em auto 0;\n  font-size: 16px;\n  line-height: 18px;\n\n  @media (min-width: 400px) {\n    font-size: 20px;\n    line-height: 22px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.1em;\n    line-height: 1.2em;\n  }\n`\n\nexport const installationMessage = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n  font-size: 16px;\n  line-height: 18px;\n\n  @media (min-width: 400px) {\n    font-size: 20px;\n    line-height: 22px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.1em;\n    line-height: 1.2em;\n  }\n`","import React from 'react'\nimport TreeTile from './treeTile'\nimport Checkbox from './checkbox'\nimport DatesField from './datesField'\nimport PostCodeInput from './postCodeInput'\nimport CouponInput from './couponInput'\nimport { TREES, LARGE_TREE_NAME } from './trees'\nimport { \n  ADDITIONAL_ITEMS, \n  STAND_KEY, \n  INSTALLATION_KEY,\n} from './additionalItems'\nimport {  \n  WEEKEND_SURCHARGE, \n  REMOTE_AREA_SURCHARGE, \n  CBD_SURCHARGE, \n  fetchPostCodesFromJson\n} from './zones'\nimport * as styles from './styles'\n\nclass TreesForm extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const defaultTree = TREES[0] || {}\n    const defaultAdditionalSelection = ADDITIONAL_ITEMS[0] || {}\n    const postcodes = fetchPostCodesFromJson()\n\n    this.state = {\n      trees: TREES,\n      selectedTree: defaultTree,\n      checkedItemsSet: new Set([defaultAdditionalSelection]),\n      disabledItemsSet: new Set(),\n      total: defaultTree.price + defaultAdditionalSelection.price,\n      postcodes,\n      areaSurcharge: false,\n      dateSurcharge: false,\n      postCode: null,\n      deliveryDate: null,\n      isFormValid: true,\n      discount: {},\n      formErrorMessage: \"Please enter a valid PostCode and select a delivery date\",\n    }\n\n    this.selectTree = this.selectTree.bind(this)\n    this.onAdditionalItemsChange = this.onAdditionalItemsChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onDeliveryDateChange = this.onDeliveryDateChange.bind(this)\n    this.onPostCodeChange = this.onPostCodeChange.bind(this)\n    this.onCouponChange = this.onCouponChange.bind(this)\n    this.isFormValid = this.isFormValid.bind(this)\n  }\n\n  selectTree(tree) {\n    this.setState(state => {\n      const trees = state.trees.map(item => {\n        return {...item, selected: item.name === tree.name}\n      })\n      return {\n        ...state, \n        trees: trees, \n        selectedTree : tree,\n        total: this.getTotal({ tree }) \n      }\n    })\n  }\n\n  getTotal({\n    tree = this.state.selectedTree,\n    checkedItems = [...this.state.checkedItemsSet],\n    dateSurcharge = this.state.dateSurcharge,\n    areaSurcharge = this.state.areaSurcharge,\n    discount = this.state.discount,\n  }) {\n    const additinalItemsPrice = checkedItems.reduce((sum, item) => { \n        if (this.isAddedItemLargeStand(item, tree)) {\n          return sum + item.large.price \n        }\n        return sum + item.price \n      }, 0\n    )\n    const treePrice = tree.price - ((discount && discount.value) || 0)\n\n    return treePrice + additinalItemsPrice + dateSurcharge + areaSurcharge\n  }\n\n  onDeliveryDateChange(deliveryDate) { \n    const dateSurcharge = deliveryDate && (deliveryDate.day() % 6 === 0) ? WEEKEND_SURCHARGE : 0\n    const { postCode } = this.state\n\n    this.setState((state) => ({ \n      ...state,\n      deliveryDate,\n      dateSurcharge, \n      isFormValid: this.isFormValid({ deliveryDate, postCode }),\n      total: this.getTotal({ dateSurcharge }),\n    }))\n  }\n\n  onPostCodeChange(postCode, valid) { \n    const { \n      deliveryDate, \n      postcodes, \n      dateSurcharge,\n     } = this.state\n\n    if (!valid) { \n      this.setState((state) => ({ \n        ...state,\n        postCode: null,\n        isFormValid: false,\n        total: this.getTotal({ areaSurcharge: false }),\n      }))\n      return\n    }\n    const postCodeEnum = postcodes.find(c => c.code === postCode)\n    const availableDates = postCodeEnum ? postCodeEnum.zone.availableDates : []\n    const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n    let newDeliveryDate = deliveryDate\n    let newDateSurcharge = dateSurcharge\n\n    // if deliveryDate is selected, but not in avaiable dates, set to null\n    if (deliveryDate && !availableDates.find(d => d === deliveryDate.date())){\n      newDeliveryDate = null\n      newDateSurcharge = null\n    }\n\n    this.setState((state) => ({ \n      ...state,\n      postCode,\n      areaSurcharge,\n      availableDates,\n      isFormValid: this.isFormValid({ deliveryDate: newDeliveryDate, postCode }),\n      deliveryDate: newDeliveryDate,\n      dateSurcharge: newDateSurcharge,\n      total: this.getTotal({ areaSurcharge, dateSurcharge }),\n    }))\n  }\n\n  onCouponChange(discount) {\n    this.setState((state) => ({ \n      ...state,\n      discount, \n      total: this.getTotal({ discount: discount || {} }),\n    }))\n  }\n\n  onAdditionalItemsChange(e) {\n    const { checkedItemsSet, isShowInstallationMessage } = this.state\n    const { name : itemKey, checked: isChecked } = e.target\n\n    const item = ADDITIONAL_ITEMS.find(i => i.key === itemKey)\n\n    if (!isChecked) {\n      checkedItemsSet.delete(item)\n    } else {\n      checkedItemsSet.add(item)\n    }\n    // this.updateInstallation(isChecked, itemKey, checkedItemsSet, disabledItemsSet)\n\n    const isShowInstallMessage = this.checkInstallation(isChecked, itemKey, checkedItemsSet)\n\n    this.setState((state) => ({ \n      ...state,\n      checkedItemsSet,\n      isShowInstallationMessage: isShowInstallMessage === null ? isShowInstallationMessage: isShowInstallMessage,\n      total: this.getTotal({checkedItems:  [...checkedItemsSet]}),\n    }));\n  }\n\n  checkInstallation(isChecked, itemKey, checkedItemsSet) {\n    // debugger\n    if (itemKey === INSTALLATION_KEY && !isChecked) {\n      return false\n    }\n    if (itemKey === STAND_KEY && isChecked) {\n      return false\n    }\n    if (itemKey === INSTALLATION_KEY && isChecked) {\n      const stand = [...checkedItemsSet].find(i => i.key === STAND_KEY)\n      return !stand\n    } \n    if (itemKey === STAND_KEY && !isChecked) {\n      const installation = [...checkedItemsSet].find(i => i.key === INSTALLATION_KEY)\n      return !!installation\n    }\n    return null\n  }\n\n  updateInstallation(isChecked, itemKey, checkedItemsSet, disabledItemsSet) {\n    if (!itemKey.includes(STAND_KEY)) { \n      return\n    }\n    const installation = ADDITIONAL_ITEMS.find(i => i.key === INSTALLATION_KEY)\n\n    if (isChecked) {\n      disabledItemsSet.delete(installation)\n    } else {\n      checkedItemsSet.delete(installation)\n      disabledItemsSet.add(installation)\n    }\n  }\n\n  getLabelText(item) {\n    return <>{item.label} <span>{`+$${item.price}`}</span></>\n  }\n\n  isFormValid ({ \n    deliveryDate, \n    postCode,\n  }) {\n    return !!postCode && !!deliveryDate\n  }\n\n  isAddedItemLargeStand(item, selectedTree) {\n    return item.key === STAND_KEY && selectedTree.name === LARGE_TREE_NAME\n  }\n\n  /*returns a string day of month with formatted like this:\n  / '01'  - zero prepending if number is one digit\n  / '10'\n  */\n  formatDate(date) {\n    return date ? ('0' + date.date()).slice(-2) : ''\n  }\n\n  formatDeliveryPrice(areaSurcharge = 0, dateSurcharge = 0) {\n    return areaSurcharge + dateSurcharge\n  }\n\n  formatZone(postCode) {\n    const { postcodes } = this.state\n    const postCodeEnum = postcodes.find(c => c.code === postCode)\n    const zone = postCodeEnum ? postCodeEnum.zone.name : null\n    return zone\n  }\n\n  formatTree(tree, discount) {\n    return (discount && discount.value) ? discount.productKeys[tree.name] : tree.key\n  }\n\n  formatAdditionalItemsNames(checkedItemsSet) {\n    const { selectedTree } = this.state\n    const additionalItemsNames = [...checkedItemsSet].map(i => {\n      if (this.isAddedItemLargeStand(i, selectedTree)){\n        return i.large.name\n      }\n      return i.name\n    })\n    return additionalItemsNames || []\n  }\n\n  /* \"Remote\" | \"CBD\" | \"\" */\n  formatArea(areaSurcharge) {\n    if(areaSurcharge === REMOTE_AREA_SURCHARGE) {\n      return 'Remote'\n    }\n    if(areaSurcharge === CBD_SURCHARGE) {\n      return 'CBD'\n    }\n    return 'Normal'\n  }\n\n  onSubmit(e) {\n    if(!this.isFormValid(this.state)){\n      e.preventDefault()\n      this.setState((state) => ({ \n        ...state,\n        isFormValid: false,\n      }))\n      return \n    }\n\n    console.log('tree', e.target.tree.value)\n    console.log('addOns', e.target.addOns.value)\n    console.log('postcode', e.target.postcode.value)\n    console.log('zone', e.target.zone.value)\n    console.log('deliveryDay', e.target.deliveryDay.value)\n    console.log('area', e.target.area.value)\n    console.log('deliveryPrice', e.target.deliveryPrice.value)\n    console.log('total', e.target.total.value)\n    debugger\n  }\n\n  render() {\n    const { \n      trees, \n      total, \n      checkedItemsSet, \n      disabledItemsSet, \n      availableDates,\n      deliveryDate,\n      isFormValid,\n      formErrorMessage,\n      postcodes,\n      selectedTree,\n      areaSurcharge,\n      dateSurcharge,\n      discount,\n      postCode,\n      isShowInstallationMessage,\n    } = this.state\n\n    const treesList = trees.map(tree => (\n      <TreeTile \n        tree={tree} \n        key={tree.name} \n        selectTree={this.selectTree}\n        discount={discount}\n      />\n    ))\n\n    const checkboxes = ADDITIONAL_ITEMS.map(item => {\n      let labelText = this.getLabelText( \n        this.isAddedItemLargeStand(item, selectedTree) ? item.large : item\n      )\n\n      const isShowMessage = item.key === INSTALLATION_KEY && isShowInstallationMessage\n      return (\n        <div key={item.key}>\n          <label className={styles.checkboxLabel}>\n            <Checkbox \n              name={item.key} \n              checked={checkedItemsSet.has(item)} \n              disabled={disabledItemsSet.has(item)} \n              onChange={this.onAdditionalItemsChange} \n            />\n            {labelText}\n          </label>\n          {isShowMessage && (\n            <p className={styles.installationMessage}>\n              {'Please note we only install into stands that have been supplied by us.'}\n            </p>\n          )}\n        </div>\n    )})\n\n    return (\n      <form \n        className={styles.boxWpap} \n        name=\"trees\"  \n        method=\"post\"  \n        action=\"/checkout\" \n        onSubmit={this.onSubmit}\n      >\n        <input name=\"tree\" value={this.formatTree(selectedTree, discount)} type=\"hidden\"/>\n        <input name=\"addOns\" value={this.formatAdditionalItemsNames(checkedItemsSet)} type=\"hidden\"/>\n        <input name=\"deliveryDay\" value={this.formatDate(deliveryDate)} type=\"hidden\"/>\n        <input name=\"area\" value={this.formatArea(areaSurcharge)} type=\"hidden\"/>\n        <input name=\"zone\" value={this.formatZone(postCode)} type=\"hidden\"/>\n        <input name=\"deliveryPrice\" value={this.formatDeliveryPrice(areaSurcharge, dateSurcharge)} type=\"hidden\"/>\n        <input name=\"total\" value={total || 0} type=\"hidden\"/>\n\n        <h2 className={styles.h2}>Order now</h2>\n        <hr className={styles.hr}/>\n        <div className={styles.tilesWpap}>\n          {treesList}\n        </div>\n        <div className={styles.checkboxesWpap}>\n          {checkboxes}\n        </div>\n        <hr className={styles.hr}/>\n        <div className={styles.subTextGreen}>\n          Delivery starts in December. Please note! Additional surcharge may be applied for CBD, remote suburbs and weekend deliveries.\n        </div>\n        <PostCodeInput \n          postcodes={postcodes}\n          onPostCodeChange={this.onPostCodeChange}/>\n        <DatesField \n          onDeliveryDateChange={this.onDeliveryDateChange}\n          availableDays={availableDates}\n          deliveryDate={deliveryDate}\n        />\n        {!!dateSurcharge && (\n          <p className={styles.surchargeMessage}>\n            {`Weekend surcharge of $${dateSurcharge} has been applied.`}\n          </p>\n        )}\n        <CouponInput \n          onCouponChange={this.onCouponChange}\n        />\n        <hr className={styles.hr}/>\n        <button \n          type=\"submit\"\n          className={styles.cta} \n          disabled={!isFormValid}\n        >\n            {`Buy for $${total}`}\n        </button>\n        {!isFormValid && (\n          <p className={styles.surchargeMessage}>{formErrorMessage}</p>\n        )}\n      </form>\n    )\n  }\n}\n\n\n\nexport default TreesForm\n\nTreesForm.propTypes = {\n\n}","import { css } from 'emotion'\nimport { RED, DARK_GREEN, YELLOW } from './colorConsts'\n\nexport const pageWpap = css`\n  &&& {\n    @media (min-width: 768px) {\n      font-size: 22px;\n      line-height: 28px;\n    }\n  }\n  * {\n    font-family: 'Abhaya Libre', serif;\n  }\n  padding: 20px;\n  text-align: center;\n  width: 100%;\n  background-image: url(\"./images/mobile_bg.png\"); \n  background-repeat: no-repeat;\n  background-size: 100%;\n  @media (min-width: 600px) {\n   background-image: url(\"./images/bg-desktop.jpg\"); \n  }\n`\n\nexport const specialOffer = css`\n  color: ${YELLOW};\n  background-color: ${RED};\n  font-weight: 600;\n  width: 100%;\n  margin: -.6em auto 0;\n  padding: 0.2em 0.4em 0.2em 3em;\n  font-size: 1em;\n  line-height: 1.1em;\n  border: 1px solid #fff;\n  position: relative;\n  span {\n    font-weight: 600;\n    font-size: 1em;\n    line-height: 1.1em;\n    color: ${YELLOW};\n  }\n  ::after {\n    content: \"\";\n    position: absolute;\n    background-image: url(\"./images/mult_mobile.png\"); \n    background-repeat: no-repeat;\n    background-size: contain; \n    top: -10px;\n    left: -64px;\n    height: 140px;\n    width: 116px;\n    @media (min-width: 768px) {\n      background-image: url(\"./images/mult.png\"); \n      top:-3vw;\n      left: -12vw;\n      height: 23vw; \n      width: 19vw; \n    }\n  }\n  @media (min-width: 500px) {\n    width: 28em;\n    margin: 2vw auto 0;\n    padding: 0.5em 0.5em 0.5em 3em;\n    cursor: pointer;\n  }\n  @media (min-width: 768px) {\n    width: 25em;\n    font-size: 1.8vw;\n    line-height: 2.1vw;\n    padding: 0.4em 0.3em 0.3em 3.6em;\n    span {\n      font-size: 0.85em;\n    }\n  }\n`\n\nexport const subTextRed = css`\n  color: ${RED};\n  font-weight: 500;\n  width: 90%;\n  margin: .2em auto 1em;\n  font-size: .8em;\n  line-height: 1em;\n  letter-spacing: 1px;\n  a {\n    color: ${RED};\n    font-weight: 600;\n    font-size: 1em;\n    line-height: 1em;\n    letter-spacing: 1px;\n  }\n  @media (min-width: 400px) {\n    width: 100%;\n    font-size: 0.9em;\n    line-height: 1.1em;\n    cursor: pointer;\n  }\n  @media (min-width: 480px) {\n    margin: 0 auto 1em;\n    font-size: 1.2em;\n    width: 20em;\n  }\n  @media (min-width: 768px) {\n    width: 47vw;\n    font-size: 1.3vw;\n    line-height: 1.4vw;\n    font-weight: 600;\n    margin: 1vw auto 2vw;\n    padding-left: 4em;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 16px;\n  line-height: 18px;\n  @media (min-width: 400px) {\n    font-size: 20px;\n    line-height: 22px;\n  }\n  .desktopOnly {\n    display: none;\n  }\n  @media (min-width: 500px) {\n    width: 32em;\n    font-size: 0.9em;\n    line-height: 1.1em;\n    .desktopOnly {\n      display: inline;\n      color: ${DARK_GREEN};\n      font-size: 1em;\n      line-height: 1.1em;\n    }\n  }\n`\n\nexport const h1 = css`\n  margin: 3vw auto 28vw;\n  background-image: url(\"./images/jingles-logo.png\"); \n  background-repeat: no-repeat;\n  height: 95px;\n  width: 244px;\n  cursor: pointer;\n  @media (min-width: 768px) {\n    background-image: url(\"./images/jingles-logo_big.png\"); \n    background-repeat: no-repeat;\n    background-size: contain;\n    height: 12vw;\n    width: 30vw;\n    max-height: 190px;\n    max-width: 486px;\n    margin: 3vw auto 24vw;\n  }\n  @media (min-width: 1920px) {\n    margin: 3vw auto 30vw;\n  }\n`\n\nexport const car = css`\n  background-image: url(\"./images/truck_new.png\"); \n  background-repeat: no-repeat;\n  height: 179px;\n  width: 300px;\n  margin: 0 auto;\n`","import React from 'react'\nimport Feed from 'react-instagram-authless-feed'\nimport TreesForm from './treesForm'\nimport * as styles from './styles'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: undefined\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ done: true })\n    }, 200);\n  }\n\n  scrollToForm() {\n    const anchor = document.getElementsByName('trees')[0]\n    if(anchor){\n      anchor.scrollIntoView({ behavior: \"smooth\" })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.done ? (\n          <>\n           <div className={styles.pageWpap}>\n             <div className={styles.specialOffer} onClick={this.scrollToForm}>\n               Standard Tree with Cinco stand for $154\n               <br/>\n               <span>including delivery in Melbourne Area during the week.</span>\n             </div>\n             <div className={styles.subTextRed} onClick={this.scrollToForm}>\n                HAVE YOU FOUND A CHEAPER CHRISTMAS TREE ELSEWHERE? \n                PLEASE CONTACT US ON <a href=\"tel:0411399607\">0411399607</a> AND WE WILL BEAT IT BY 5%!\n             </div>\n             <div className={styles.h1} onClick={this.scrollToForm}>\n             </div>\n             <div className={styles.subTextGreen}>\n              <span className='desktopOnly'>\n                Are you looking for a real Christmas tree to make your Christmas spectacular? \n              </span>\n               Our trees are sustainably grown on a farm in Daylesford (VIC).\n               With delivery, setup and disposal, you get it all covered.\n             </div>\n             <TreesForm></TreesForm>\n             <div className={styles.car}></div>\n           </div>\n           <Feed userName=\"jinglesxmastrees\" className=\"Feed\" classNameLoading=\"Loading\" limit=\"4\"/>\n        </>\n        ) : (\n          <h1 className=\"loading\">Jingles Xmas Trees</h1>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'react-dates/initialize'\nimport 'react-dates/lib/css/_datepicker.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}