{"version":3,"sources":["treesForm/trees.js","colorConsts.js","treesForm/treeTile/styles.js","treesForm/treeTile/index.js","treesForm/checkbox/styles.js","treesForm/checkbox/index.js","treesForm/datesField/styles.js","treesForm/datesField/index.js","treesForm/postCodeInput/styles.js","treesForm/postCodeInput/index.js","treesForm/additionalItems.js","treesForm/zones.js","treesForm/styles.js","treesForm/index.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["LARGE_TREE_NAME","TREES","name","height","price","key","selected","RED","CTA","DARK_GREEN","YELLOW","treeTile","css","activeClass","bigTree","title","hr","TreeTile","tree","selectTree","tilesClasses","classNames","styles","trees","className","onClick","input","Checkbox","type","checked","disabled","onChange","calendar","DatesField","props","isBlocked","availableDays","day","find","d","date","deliveryDate","state","focused","daySize","onDateChange","bind","onFocusChange","window","addEventListener","this","resize","newSize","innerWidth","setState","removeEventListener","prevProps","onDeliveryDateChange","numberOfMonths","initialVisibleMonth","moment","isDayBlocked","noNavButtons","hideKeyboardShortcutsPanel","React","Component","postcode","label","error","PostCodeInput","handleChange","event","number","Number","target","value","onPostCodeChange","isNaN","valid","isMissingPostcode","postCodeEnum","postcodes","c","code","areaSurcharge","zone","pattern","maxLength","minLength","placeholder","href","STAND_KEY","ADDITIONAL_ITEMS","large","REMOTE_AREA_SURCHARGE","ZONES","C2","availableDates","SE","SE1","N","N1","WN","WN1","S","S1","W","W1","tilesWpap","checkboxesWpap","checkboxLabel","h2","boxWpap","cta","subTextGreen","surchargeMessage","TreesForm","defaultTree","defaultAdditionalSelection","postcodes_json","map","p","surcharge","console","dir","fetchPostCodesFromJson","selectedTree","checkedItemsSet","Set","disabledItemsSet","total","dateSurcharge","postCode","isFormValid","formErrorMessage","onAdditionalItemsChange","onSubmit","item","getTotal","checkedItems","additinalItemsPrice","reduce","sum","isAddedItemLargeStand","prevPostCode","newDeliveryDate","e","itemKey","isChecked","i","add","delete","updateInstallation","includes","installation","slice","preventDefault","log","addOns","deliveryDay","area","treesList","checkboxes","labelText","getLabelText","has","method","action","formatAdditionalItemsNames","formatDate","formatArea","pageWpap","specialOffer","subTextRed","h1","car","App","done","undefined","setTimeout","anchor","document","getElementsByName","scrollIntoView","behavior","scrollToForm","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16afe1b1.chunk.js","sourcesContent":["export const STANDARD_TREE_NAME = 'Standard'\nexport const LARGE_TREE_NAME = 'Large'\n\n// prod_IJj7l2rVzMfaXC\tTree 6\n// prod_IJj4eyw0urKfb1\tTree 7\n\nexport const TREES = [{\n        name: STANDARD_TREE_NAME,\n        height: '1.8m',\n        price: 109,\n        key: 'prod_IJj7l2rVzMfaXC',\n        selected: true,\n    },{\n        name: LARGE_TREE_NAME,\n        height: '2.1m',\n        price: 139,\n        key: 'prod_IJj4eyw0urKfb1',\n    }]","export const RED = '#ff1212'\nexport const PALE_GREEN = '#f4f5eb'\nexport const CTA = '#6e9366'\nexport const DARK_GREEN = '#2b4432'\nexport const YELLOW = '#ffffa5'\n\n","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const treeTile = css`\n  width: 46%;\n  background-color: #fdecd3;\n  padding: .5em 0 .5em 2.6em;\n  box-sizing: border-box;\n  border-radius: 6px;\n  box-shadow: 2px 2px 2px #ddd;\n  text-align: center;\n  font-size: 0.6em;\n  margin: 0.5em;\n\n  background-image: url(\"./images/tree_card.png\"); \n  background-repeat: no-repeat;\n  background-size: 3.1em;\n  background-position: left 1em bottom .8em;\n\n  @media (min-width: 375px) {\n    font-size: 0.8em;\n  }\n\n  @media (min-width: 768px) {\n    width: 300px;\n    margin: 1em;\n  }\n`\n\nexport const activeClass = css`\n  border: 1px solid ${RED};\n  label {\n    font-weight: 600;\n  }\n`\n\nexport const bigTree = css`\n  background-size: 3.6em;\n`\n\nexport const title = css`\n  color: ${RED};\n  font-weight: 500;\n\n  font-size: 16px;\n\n  @media (min-width: 375px) {\n    font-size: 18px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.5em;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n  margin: 0 20px;\n\n  @media (min-width: 375px) {\n    margin: 0 40px;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 4em;\n  }\n`","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport * as trees from '../trees'\nimport * as styles from './styles'\n\nexport const TreeTile = ({ tree = {}, selectTree }) => {\n\n  const {\n    name,\n    height = '',\n    price = '',\n    selected,\n  } = tree\n\n  let tilesClasses = classNames({\n    [styles.treeTile] : true,\n    [styles.activeClass] : !!selected,\n    [styles.bigTree]: name === trees.LARGE_TREE_NAME,\n  })\n\n  return (\n    <>\n      <div className={tilesClasses} \n          onClick={() => {selectTree(tree)}}\n      >\n        <label className={styles.title}>{name}</label>\n        <div>{height}</div>\n        <hr className={styles.hr}/>\n        <div>{`$${price}`}</div>\n      </div>\n    </>\n  )\n}\n\nexport default TreeTile\n\nTreeTile.propTypes = {\n  tree: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  selectTree: PropTypes.func,\n}\n","import { css } from 'emotion'\n\nexport const input = css`\n  margin-right: 0.4em;\n`\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nconst Checkbox = ({ \n  type = 'checkbox', \n  name, \n  checked = false, \n  disabled = false,\n  onChange,\n}) => { \n  return (\n    <input \n      className={styles.input}\n      type={type} \n      name={name} \n      checked={checked} \n      disabled={disabled}\n      onChange={onChange} \n    />\n  )\n}\n\n\nCheckbox.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Checkbox","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const datesSelect = css`\n  border: 1px solid ${CTA};\n  color: ${RED} !important;\n  line-height: 1.3;\n  padding: .6em 1.4em .5em .8em;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto 1em;\n  border: 1px solid #aaa;\n  box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n  border-radius: .5em;\n\n  @media (min-width: 768px) {\n    width: 80%;\n    max-width: 80%;\n  }\n\n`\n\nexport const calendar = css`\n  \n    td.CalendarDay__selected, \n    td.CalendarDay__selected:active, \n    td.CalendarDay__selected:hover {\n        border: 1px double ${CTA} !important;\n        background: ${CTA} !important;\n    }\n\n    .DayPicker {\n        margin: .6em auto 1em;\n    }\n\n    label {\n        color: ${CTA};\n        margin: .6em auto;\n        font-size: 1.2em;\n    }\n\n    margin: 1em auto 0;\n    text-align: center;\n\n`\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { DayPickerSingleDateController } from 'react-dates'\nimport moment from 'moment'\nimport * as styles from './styles'\n\nexport default class DatesField extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const { deliveryDate } = this.props\n\n    this.state = {\n      date: deliveryDate,\n      focused: true,\n      daySize: 35,\n    }\n\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    const { daySize } = this.state\n    let newSize = daySize\n    if ( window.innerWidth <= 325 ) {\n      newSize = 29\n    } else if ( window.innerWidth < 400 ) {\n      newSize = 35\n    } else {\n      newSize = 39\n    }\n    \n    if (daySize === newSize) {\n      return\n    }\n    this.setState({ daySize: newSize })\n  }\n\n  componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.deliveryDate !== prevProps.deliveryDate) {\n      this.setState({ \n        date: this.props.deliveryDate\n      })\n    }\n  }\n\n  onDateChange(date) {\n    const { onDeliveryDateChange } = this.props\n    onDeliveryDateChange(date)\n    this.setState({ date })\n  }\n\n  onFocusChange() {\n    // Force the focused states to always be truthy so that date is always selectable\n    this.setState({ focused: true })\n  }\n\n  isBlocked = (availableDays, day) => {\n    return !availableDays.find(d => d === day.date())\n  }\n\n  render() {\n    const { focused, daySize, date } = this.state\n    const { availableDays = [] } = this.props\n    const isDayBlocked = (day) => this.isBlocked(availableDays, day)\n    return (\n      <div className={styles.calendar}>\n        <label>Delivery Date</label>\n        <DayPickerSingleDateController\n          numberOfMonths={1} \n          focused={focused}\n          date={date}\n          daySize={daySize}\n          initialVisibleMonth={() => moment('12 2020', 'MM YYYY')}\n          isDayBlocked={isDayBlocked}\n          noNavButtons={true}\n          hideKeyboardShortcutsPanel={true}\n          onDateChange={this.onDateChange}\n          onFocusChange={this.onFocusChange}\n        />\n        \n      </div>\n    );\n    }\n  }\n  \n  DatesField.propTypes = {\n    onDeliveryDateChange: PropTypes.func.isRequired,\n    availableDays: PropTypes.array,\n    deliveryDate: PropTypes.shape(),\n  }\n  ","import { css } from 'emotion'\nimport { CTA, DARK_GREEN } from '../../colorConsts'\n\nexport const postcode = css`\n  border: 1px solid ${CTA};\n  \n  line-height: 1.3em;\n  padding: .6em 1.4em .5em .8em;\n  width: 8em;\n  max-width: 80%;\n  box-sizing: border-box;\n  margin: 1em auto 0;\n  border-radius: 6px;\n\n`\n\nexport const label = css`\n  color: ${CTA};\n  box-sizing: border-box;\n  margin: 1em;\n  width: 6em;\n  font-size: 1.2em;\n  line-height: 2em;\n\n`\n\nexport const error = css`\n  color: ${DARK_GREEN};\n  font-size: 0.9em;\n  line-height: 1.6em;\n  margin: 1em 0;\n\n  @media (min-width: 768px) {\n    font-size: 0.9em;\n    margin: .5em 0;\n  }\n\n  a {\n    font-size: 0.9em;\n    line-height: 1.6em;\n    font-weight: 600;\n\n    @media (min-width: 768px) {\n      font-weight: 500;\n    }\n  }\n`\n\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nexport default class PostCodeInput extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      valid: true,\n      isMissingPostcode: false,\n      areaSurcharge: false,\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n    handleChange = (event) => {\n      const number = Number(event.target.value)\n      const { onPostCodeChange } = this.props\n      if (isNaN(number)) {\n        return\n      } \n\n      const valid = (number/1000 | 0) === 3\n\n      let isMissingPostcode = false\n      const { postcodes } = this.props\n      const postCodeEnum = postcodes.find(c => c.code === number) \n      if(valid) {\n        isMissingPostcode = !postCodeEnum\n      }\n      const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n      onPostCodeChange(number, valid)\n      this.setState({ \n        value: number,\n        valid,\n        isMissingPostcode,\n        areaSurcharge,\n      })\n    }\n  \n    render() {\n      const { valid, value, isMissingPostcode, areaSurcharge } = this.state\n  \n      return (\n        <>\n          <label className={styles.label}>Postcode</label>\n          <input \n            className={styles.postcode}\n            type=\"text\" pattern=\"[0-9]{4}\"\n            maxLength={4} minLength={4}\n            placeholder=\"3000\"\n            name=\"postcode\" value={value} \n            onChange={this.handleChange.bind(this)}\n          />\n          {areaSurcharge && (\n            <p className={styles.error}>\n              Delivery area surcharge of ${areaSurcharge} has been applied for selected postcode\n            </p>\n          )}\n          {!valid && (\n            <p className={styles.error}>\n              Please enter a valid Victorian postcode.\n            </p>\n          )}\n          {isMissingPostcode && (\n            <p className={styles.error}>\n              {`Oops! It looks like ${value} is out of our delivery range, please call us on `}\n                <a href=\"tel:0411399607\">0411399607</a>\n              {` for delivery quote to your area.`}\n          </p>\n          )}\n\n          </>\n      );\n    }\n  }\n  \n  PostCodeInput.propTypes = {\n    onPostCodeChange: PropTypes.func.isRequired,\n  }","export const STAND_KEY = 'cincostand'\n\n// prod_IJw75RnppIFZpM\tTree Installtion\n// prod_IJj83NN3LTVrfV\tTree Preservative\n// prod_IJj8xejfYwloc6\tWatering Kit\n// prod_IJj8Dz3eLUcKTJ\tTree Disposal\n// prod_IJj7tjbVfgty7J\tCinco Stand\n// prod_IJj4MpVfOHsjuG\tLarge Cinco Stand\n\nexport const ADDITIONAL_ITEMS = [{\n        name: 'prod_IJj7tjbVfgty7J',\n        key: 'cincostand',\n        label: 'Cinco Stand',\n        price: 45,\n        large: {\n          name: 'prod_IJj4MpVfOHsjuG',\n          key: 'largecincostand',\n          label: 'Large Cinco Stand',\n          price: 60,\n        },\n      },\n      {\n        name: 'prod_IJw75RnppIFZpM',\n        key: 'installation',\n        label: 'Installation',\n        price: 20,\n      },\n      {\n        name: 'prod_IJj8xejfYwloc6',\n        key: 'wateringkit',\n        label: 'Watering Kit',\n        price: 25,\n      },\n      {\n        name: 'prod_IJj8Dz3eLUcKTJ',\n        key: 'disposal',\n        label: 'Disposal',\n        price: 15,\n      },\n      {\n        name: 'prod_IJj83NN3LTVrfV',\n        key: 'preservative',\n        label: 'Preservative',\n        price: 5,\n      },\n]","import * as postcodes_json from './zones.json'\n\nexport const WEEKEND_SURCHARGE = 25\nexport const REMOTE_AREA_SURCHARGE = 25\nexport const CBD_SURCHARGE = 50\n\n/*\nCITY\tThursday\t3,5,6,10,12,13,17,19,20\nNORTH\tWednesday\t2,5,6,9,12,13,16,19,20\nWEST\tThursday\t3,5,6,10,12,13,17,19,20\nWEST/NORTH\tWednesday, Thursday\t2,3,5,6,8,9,12,13,16,17,19,20\nSOUTH/EAST\tMonday, Tuesday\t5,6,7,8,12,13,14,15,19,20\nSOUTH\tMonday, Tuesday, Friday\t4,5,6,7,8,11,12,13,14,15,18,19,20\n*/\nexport const ZONES = {\n    C2 : {\n        name: 'C2',\n        areaSurcharge: CBD_SURCHARGE,\n        availableDates: [3,5,6,10,12,13,17,19,20],\n    },\n    SE : {\n        name: 'E',\n        areaSurcharge: false,\n        availableDates: [5,6,7,8,12,13,14,15,19,20],\n    },\n    SE1 : {\n        name: 'E1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [5,6,7,8,12,13,14,15,19,20],\n    },\n    N : {\n        name: 'N',\n        areaSurcharge: false,\n        availableDates: [2,5,6,9,12,13,16,19,20],\n    },\n    N1 : {\n        name: 'N1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [2,5,6,9,12,13,16,19,20],\n    },\n    WN : {\n        name: 'N',\n        areaSurcharge: false,\n        availableDates: [2,3,5,6,8,9,12,13,16,17,19,20],\n    },\n    WN1 : {\n        name: 'WN1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [2,3,5,6,8,9,12,13,16,17,19,20],\n    },\n    S : {\n        name: 'S',\n        areaSurcharge: false,\n        availableDates: [4,5,6,7,8,11,12,13,14,15,18,19,20],\n    },\n    S1 : {\n        name: 'S1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [4,5,6,7,8,11,12,13,14,15,18,19,20],\n    },\n    W : {\n        name: 'W',\n        areaSurcharge: false,\n        availableDates: [3,5,6,10,12,13,17,19,20],\n    },\n    W1 : {\n        name: 'W1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [3,5,6,10,12,13,17,19,20],\n    },\n}\n\n\n/**\n * reads postcodes from a Json file.\n * returns an array of postcodes, each element is in form\n * {\n    code: 3000,\n    zone: ZONES.C1\n}\n */\nexport const fetchPostCodesFromJson = () => {\n    if (!postcodes_json) {\n        return\n    }\n    const postcodes = postcodes_json.default.map((p) => {\n        return {\n            code: p.postcode,\n            zone: ZONES[`${p.zone}${!!p.surcharge ? p.surcharge : ''}`]\n        }\n    })\n    console.dir(postcodes)\n    return postcodes\n}","import { css } from 'emotion'\nimport { RED, PALE_GREEN, CTA, DARK_GREEN } from '../colorConsts'\n\nexport const tilesWpap = css`\n  padding: 8px 0;\n  display: flex;\n  justify-content: center;\n  margin: 0 auto;\n\n  @media (min-width: 768px) {\n\n  }\n`\n\nexport const checkboxesWpap = css`\n  margin: 0 auto 1em;\n  text-align: left;\n  width: 11em;\n\n  @media (min-width: 420px) {\n    width: 9em;\n  }\n`\n\nexport const checkboxLabel = css`\n  color: ${RED};\n  overflow: visible;\n  white-space: nowrap;\n  font-size: 1.2em;\n  line-height: 1.8em;\n\n  span {\n    color: #666;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n`\n\n\nexport const h2 = css`\n  color: ${CTA};\n  text-transform: none;\n  line-height: 2em;\n  margin: 0;\n  font-weight: 500;\n\n`\n\nexport const boxWpap = css`\n  padding: 1em;\n  text-align: center;\n  border: 1px solid green;\n  background-color: ${PALE_GREEN};\n  margin: 1em auto 0;\n\n  @media (min-width: 768px) {\n    width: 500px;\n  }\n  \n`\n\nexport const cta = css`\n  width: 100%;\n  margin: 1em auto;\n  background-color: ${CTA};\n  font-size: 1em;\n\n  :active, :hover, :visited, :focus{\n    background-color: ${CTA};\n  }\n\n  :disabled{\n    background-color: #aaa;\n  }\n\n  @media (min-width: 768px) {\n    margin: 1em auto;\n    width: 12em;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 1.1em;\n\n  @media (min-width: 768px) {\n    font-size: 1em;\n  }\n`\n\nexport const surchargeMessage = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto;\n  font-size: 1em;\n\n  @media (min-width: 768px) {\n    font-size: 0.9em;\n  }\n`","import React from 'react'\nimport TreeTile from './treeTile'\nimport Checkbox from './checkbox'\nimport DatesField from './datesField'\nimport PostCodeInput from './postCodeInput'\nimport { TREES, LARGE_TREE_NAME } from './trees'\nimport { ADDITIONAL_ITEMS, STAND_KEY } from './additionalItems'\nimport {  \n  WEEKEND_SURCHARGE, \n  REMOTE_AREA_SURCHARGE, \n  CBD_SURCHARGE, \n  fetchPostCodesFromJson\n} from './zones'\nimport * as styles from './styles'\n\nclass TreesForm extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const defaultTree = TREES[0] || {}\n    const defaultAdditionalSelection = ADDITIONAL_ITEMS[0] || {}\n    const postcodes = fetchPostCodesFromJson()\n\n    this.state = {\n      trees: TREES,\n      selectedTree: defaultTree,\n      checkedItemsSet: new Set([defaultAdditionalSelection]),\n      disabledItemsSet: new Set(),\n      total: defaultTree.price + defaultAdditionalSelection.price,\n      postcodes,\n      areaSurcharge: false,\n      dateSurcharge: false,\n      postCode: null,\n      deliveryDate: null,\n      isFormValid: true,\n      formErrorMessage: \"Please enter a valid PostCode and select a delivery date\",\n    }\n\n    this.selectTree = this.selectTree.bind(this)\n    this.onAdditionalItemsChange = this.onAdditionalItemsChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onDeliveryDateChange = this.onDeliveryDateChange.bind(this)\n    this.onPostCodeChange = this.onPostCodeChange.bind(this)\n    this.isFormValid = this.isFormValid.bind(this)\n  }\n\n  selectTree(tree) {\n    this.setState(state => {\n      const trees = state.trees.map(item => {\n        return {...item, selected: item.name === tree.name}\n      })\n      return {\n        ...state, \n        trees: trees, \n        selectedTree : tree,\n        total: this.getTotal({tree:tree}) \n      }\n    })\n  }\n\n  getTotal({\n    tree = this.state.selectedTree,\n    checkedItems = [...this.state.checkedItemsSet],\n    dateSurcharge = this.state.dateSurcharge,\n    areaSurcharge = this.state.areaSurcharge,\n  }) {\n    const additinalItemsPrice = checkedItems.reduce((sum, item) => { \n        if (this.isAddedItemLargeStand(item)) {\n          return sum + item.large.price \n        }\n        return sum + item.price \n      }, 0\n    )\n\n    return tree.price + additinalItemsPrice + dateSurcharge + areaSurcharge\n  }\n\n  onDeliveryDateChange(deliveryDate) { \n    const dateSurcharge = deliveryDate && (deliveryDate.day() % 6 === 0) ? WEEKEND_SURCHARGE : 0\n    const { postCode } = this.state\n\n    this.setState((state) => ({ \n      ...state,\n      deliveryDate,\n      dateSurcharge, \n      isFormValid: this.isFormValid({ deliveryDate, postCode }),\n      total: this.getTotal({ dateSurcharge }),\n    }))\n  }\n\n  onPostCodeChange(postCode, valid) { \n    const { deliveryDate, postcodes, postCode: prevPostCode } = this.state\n\n    if (!valid && prevPostCode) { \n      this.setState((state) => ({ \n        ...state,\n        postCode: null,\n        isFormValid: false,\n        total: this.getTotal({ areaSurcharge: false }),\n      }))\n      return\n    }\n    const postCodeEnum = postcodes.find(c => c.code === postCode)\n    const availableDates = postCodeEnum ? postCodeEnum.zone.availableDates : []\n    const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n    let newDeliveryDate = deliveryDate\n    // if deliveryDate is selected, but not in avaiable dates, set to null\n    if (deliveryDate && !availableDates.find(d => d === deliveryDate.date())){\n      newDeliveryDate = null\n    }\n\n    if (!postCodeEnum) {\n      \n    }\n\n    this.setState((state) => ({ \n      ...state,\n      postCode,\n      areaSurcharge,\n      availableDates,\n      isFormValid: this.isFormValid({ deliveryDate: newDeliveryDate, postCode }),\n      deliveryDate: newDeliveryDate,\n      total: this.getTotal({ areaSurcharge }),\n    }))\n  }\n\n  onAdditionalItemsChange(e) {\n    const { checkedItemsSet, disabledItemsSet } = this.state\n    const { name : itemKey, checked: isChecked } = e.target\n\n    const item = ADDITIONAL_ITEMS.find(i => i.key === itemKey)\n\n    if (!isChecked) {\n      checkedItemsSet.delete(item)\n    } else {\n      checkedItemsSet.add(item)\n    }\n    this.updateInstallation(isChecked, itemKey, checkedItemsSet, disabledItemsSet)\n\n    this.setState((state) => ({ \n      ...state,\n      checkedItemsSet,\n      total: this.getTotal({checkedItems:  [...checkedItemsSet]}),\n    }));\n  }\n\n  updateInstallation(isChecked, itemKey, checkedItemsSet, disabledItemsSet) {\n    if (!itemKey.includes(STAND_KEY)) { \n      return\n    }\n    const installation = ADDITIONAL_ITEMS.find(i => i.key === 'installation')\n    if (isChecked) {\n      disabledItemsSet.delete(installation)\n    } else {\n      checkedItemsSet.delete(installation)\n      disabledItemsSet.add(installation)\n    }\n  }\n\n  getLabelText(item) {\n    return <>{item.label} <span>{`+$${item.price}`}</span></>\n  }\n\n  isFormValid ({ \n    deliveryDate, \n    postCode,\n  }) {\n    return !!postCode && !!deliveryDate\n  }\n\n  isAddedItemLargeStand(item) {\n    const { selectedTree } = this.state\n    return item.key === STAND_KEY && selectedTree.name === LARGE_TREE_NAME\n  }\n\n  /*returns a string day of month with formatted like this:\n  / '01'  - zero prepending if number is one digit\n  / '10'\n  */\n  formatDate(date) {\n    return date ? ('0' + date.date()).slice(-2) : ''\n  }\n\n  formatAdditionalItemsNames(checkedItemsSet) {\n    const additionalItemsNames = [...checkedItemsSet].map(i => {\n      if (this.isAddedItemLargeStand(i)){\n        return i.large.name\n      }\n      return i.name\n    })\n    return additionalItemsNames || []\n  }\n\n  /* \"Remote\" | \"CBD\" | \"\" */\n  formatArea(areaSurcharge) {\n    if(areaSurcharge === REMOTE_AREA_SURCHARGE) {\n      return 'Remote'\n    }\n    if(areaSurcharge === CBD_SURCHARGE) {\n      return 'CBD'\n    }\n    return ''\n  }\n\n  onSubmit(e) {\n    if(!this.isFormValid(this.state)){\n      e.preventDefault()\n      this.setState((state) => ({ \n        ...state,\n        isFormValid: false,\n      }))\n      return \n    }\n\n    console.log(e.target.tree.value)\n    console.log(e.target.addOns.value)\n    console.log(e.target.postcode.value)\n    console.log(e.target.deliveryDay.value)\n    console.log(e.target.area.value)\n    console.log(e.target.total.value)\n  }\n\n  render() {\n    const { \n      trees, \n      total, \n      checkedItemsSet, \n      disabledItemsSet, \n      availableDates,\n      deliveryDate,\n      isFormValid,\n      formErrorMessage,\n      postcodes,\n      selectedTree,\n      areaSurcharge,\n      dateSurcharge,\n    } = this.state\n\n    const treesList = trees.map(tree => (\n      <TreeTile tree={tree} key={tree.name} selectTree={this.selectTree}/>\n    ))\n\n    const checkboxes = ADDITIONAL_ITEMS.map(item => {\n      let labelText = this.getLabelText( \n        this.isAddedItemLargeStand(item) ? item.large : item\n      )\n\n      return (\n        <div key={item.key}>\n          <label className={styles.checkboxLabel}>\n            <Checkbox \n              name={item.key} \n              checked={checkedItemsSet.has(item)} \n              disabled={disabledItemsSet.has(item)} \n              onChange={this.onAdditionalItemsChange} \n            />\n            {labelText}\n          </label>\n        </div>\n    )})\n\n    return (\n      <form \n        className={styles.boxWpap} \n        name=\"trees\"  \n        method=\"post\"  \n        action=\"/checkout\" \n        onSubmit={this.onSubmit}\n      >\n        <input name=\"tree\" value={selectedTree.key} type=\"hidden\"/>\n        <input name=\"addOns\" value={this.formatAdditionalItemsNames(checkedItemsSet)} type=\"hidden\"/>\n        <input name=\"deliveryDay\" value={this.formatDate(deliveryDate)} type=\"hidden\"/>\n        <input name=\"area\" value={this.formatArea(areaSurcharge)} type=\"hidden\"/>\n        <input name=\"total\" value={total || 0} type=\"hidden\"/>\n\n        <h2 className={styles.h2}>Order now</h2>\n        <hr className={styles.hr}/>\n        <div className={styles.tilesWpap}>\n          {treesList}\n        </div>\n        <div className={styles.checkboxesWpap}>\n          {checkboxes}\n        </div>\n        <hr className={styles.hr}/>\n        <div className={styles.subTextGreen}>\n          Delivery starts in December. Please note! Additional surcharge may be applied for CBD, remote suburbs and weekend deliveries.\n        </div>\n        <PostCodeInput \n          postcodes={postcodes}\n          onPostCodeChange={this.onPostCodeChange}/>\n        <DatesField \n          onDeliveryDateChange={this.onDeliveryDateChange}\n          availableDays={availableDates}\n          deliveryDate={deliveryDate}\n        />\n        {!!dateSurcharge && (\n          <p className={styles.surchargeMessage}>\n            {`Weekend surcharge of $${dateSurcharge} has been applied`}\n          </p>\n        )}\n        <hr className={styles.hr}/>\n        <button \n          type=\"submit\"\n          className={styles.cta} \n          disabled={!isFormValid}\n        >\n            {`Buy for $${total}`}\n        </button>\n        <p>{!isFormValid && formErrorMessage}</p>\n      </form>\n    )\n  }\n}\n\n\n\nexport default TreesForm\n\nTreesForm.propTypes = {\n\n}\n","import { css } from 'emotion'\nimport { RED, DARK_GREEN, YELLOW } from './colorConsts'\n\nexport const pageWpap = css`\n  &&& {\n    @media (min-width: 768px) {\n      font-size: 20px;\n      line-height: 26px;\n    }\n  }\n  padding: 20px;\n  text-align: center;\n  width: 100%;\n  background-image: url(\"./images/mobile_bg.png\"); \n  background-repeat: no-repeat;\n  background-size: 100%;\n\n  @media (min-width: 600px) {\n   background-image: url(\"./images/bg.png\"); \n  }\n`\n\nexport const specialOffer = css`\n  color: ${YELLOW};\n  background-color: ${RED};\n  width: 90%;\n  margin: 2vw auto 0;\n  padding: 0.4em 0.4em 0.4em 4em;\n  font-size: 0.8em;\n  line-height: 1.2em;\n  border: 1px solid #fff;\n  position: relative;\n\n  span {\n    font-size: 1em;\n    line-height: 1.2em;\n    color: ${YELLOW};\n  }\n\n  ::after {\n    content: \"\";\n    background-image: url(\"./images/bells.png\"); \n    background-repeat: no-repeat;\n    position: absolute;\n    background-size: 110px;\n    top:-20px;\n    left: -40px;\n    height: 130px;\n    width: 110px;\n\n    @media (min-width: 768px) {\n      background-image: url(\"./images/bells_desktop.png\"); \n      background-size: 15vw; \n      top:-2.4vw;\n      left: -10vw;\n      height: 18vw; \n      width: 15vw; \n    }\n  }\n\n  @media (min-width: 500px) {\n    width: 28em;\n    padding: 0.5em 0.5em 0.5em 3em;\n    cursor: pointer;\n  }\n\n  @media (min-width: 768px) {\n    width: 24em;\n    font-size: 1.6vw;\n    line-height: 2vw;\n    padding: 0.5em 0.5em 0.5em 2.2em;\n\n    span {\n      font-size: 0.75em;\n    }\n  }\n`\n\nexport const subTextRed = css`\n  color: ${RED};\n  width: 100%;\n  margin: 11em auto 1em;\n  font-size: 0.9em;\n\n  @media (min-width: 360px) {\n    margin: 10em auto 1em;\n  }\n\n  @media (min-width: 400px) {\n    margin: 12em auto 1em;\n  }\n\n  @media (min-width: 480px) {\n    margin: 0 auto 9em;\n    font-size: 1.1em;\n    width: 28em;\n    cursor: pointer;\n  }\n\n  @media (min-width: 768px) {\n    width: 50vw;\n    font-size: 1.7vw;\n    line-height: 2.2vw;\n    margin: 0 auto 22vw;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 0.9em;\n\n  @media (min-width: 500px) {\n    width: 32em;\n  }\n`\n\nexport const h1 = css`\n  margin: 3vw auto 1vw;\n\n  background-image: url(\"./images/jingles-logo.png\"); \n  background-repeat: no-repeat;\n  height: 95px;\n  width: 244px;\n  cursor: pointer;\n\n  @media (min-width: 768px) {\n    background-image: url(\"./images/jingles-logo_big.png\"); \n    background-repeat: no-repeat;\n    background-size: contain;\n    height: 12vw;\n    width: 30vw;\n    max-height: 190px;\n    max-width: 486px;\n  }\n`\n\nexport const car = css`\n  background-image: url(\"./images/truck_new.png\"); \n  background-repeat: no-repeat;\n  height: 179px;\n  width: 300px;\n  margin: 0 auto;\n`\n","import React from 'react'\nimport TreesForm from './treesForm'\nimport * as styles from './styles'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: undefined\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ done: true })\n    }, 200);\n  }\n\n  scrollToForm() {\n    const anchor = document.getElementsByName('trees')[0]\n    if(anchor){\n      anchor.scrollIntoView({ behavior: \"smooth\" })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.done ? (\n           <div className={styles.pageWpap}>\n             <div className={styles.specialOffer} onClick={this.scrollToForm}>\n               Standard Tree with Cinco stand for $154\n               <br/>\n               <span>including delivery in Melbourne Area during the week.</span>\n             </div>\n             <div className={styles.h1} onClick={this.scrollToForm}>\n             </div>\n             <div className={styles.subTextRed} onClick={this.scrollToForm}>\n               Are you looking for a real Christmas tree to make your Christmas spectacular? You just found it! Save with our special offer.\n             </div>\n             <div className={styles.subTextGreen}>\n               Our trees are sustainably grown on a farm in Daylesford (VIC).\n               With delivery, setup and disposal, you get it all covered.\n             </div>\n             <TreesForm></TreesForm>\n             <div className={styles.car}></div>\n           </div>\n        ) : (\n          <h1 className=\"loading\">Jingles Xmas Trees</h1>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'react-dates/initialize'\nimport 'react-dates/lib/css/_datepicker.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}