{"version":3,"sources":["treesForm/trees.js","colorConsts.js","treesForm/treeTile/styles.js","treesForm/treeTile/index.js","treesForm/checkbox/styles.js","treesForm/checkbox/index.js","treesForm/datesField/styles.js","treesForm/datesField/index.js","treesForm/postCodeInput/styles.js","treesForm/postCodeInput/index.js","treesForm/additionalItems.js","treesForm/zones.js","treesForm/styles.js","treesForm/index.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["LARGE_TREE_NAME","TREES","name","height","price","selected","RED","CTA","DARK_GREEN","YELLOW","treeTile","css","activeClass","bigTree","title","hr","TreeTile","tree","selectTree","tilesClasses","classNames","styles","trees","className","onClick","input","Checkbox","type","checked","disabled","onChange","calendar","DatesField","props","isBlocked","availableDays","day","find","d","date","deliveryDate","state","focused","daySize","onDateChange","bind","onFocusChange","window","addEventListener","this","resize","newSize","innerWidth","setState","removeEventListener","prevProps","onDeliveryDateChange","numberOfMonths","initialVisibleMonth","moment","isDayBlocked","noNavButtons","hideKeyboardShortcutsPanel","React","Component","postcode","label","error","PostCodeInput","handleChange","event","number","Number","target","value","onPostCodeChange","isNaN","valid","isMissingPostcode","postCodeEnum","postcodes","c","code","areaSurcharge","zone","pattern","maxLength","minLength","placeholder","href","STAND_KEY","ADDITIONAL_ITEMS","key","large","ZONES","C1","availableDates","E","E1","N","N1","S","S1","W","W1","tilesWpap","checkboxesWpap","checkboxLabel","h2","boxWpap","cta","subTextGreen","TreesForm","defaultTree","defaultAdditionalSelection","postcodes_json","map","p","Zone","surcharge","fetchPostCodesFromJson","selectedTree","checkedItemsSet","Set","disabledItemsSet","total","dateSurcharge","postCode","isFormValid","formErrorMessage","onAdditionalItemsChange","onSubmit","item","getTotal","checkedItems","additinalItemsPrice","reduce","sum","isAddedItemLargeStand","areaPrice","datePrice","prevPostCode","newDeliveryDate","e","itemName","isChecked","i","add","delete","updateInstallation","includes","installation","console","log","addOns","deliveryDay","weekendSurcharge","treesList","checkboxes","labelText","getLabelText","has","additionalItemsNames","method","action","pageWpap","specialOffer","subTextRed","h1","car","PrimaryLayout","App","done","undefined","setTimeout","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1521a327.chunk.js","sourcesContent":["export const STANDARD_TREE_NAME = 'Standard'\nexport const LARGE_TREE_NAME = 'Large'\n\nexport const TREES = [{\n        name: STANDARD_TREE_NAME,\n        height: '1.8m',\n        price: 109,\n        selected: true,\n    },{\n        name: LARGE_TREE_NAME,\n        height: '2.1m',\n        price: 139,\n    }]","export const RED = '#ff1212'\nexport const PALE_GREEN = '#f4f5eb'\nexport const CTA = '#6e9366'\nexport const DARK_GREEN = '#2b4432'\nexport const YELLOW = '#ffffa5'\n\n","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const treeTile = css`\n  width: 46%;\n  background-color: #fdecd3;\n  padding: .5em 0 .5em 2.6em;\n  box-sizing: border-box;\n  border-radius: 6px;\n  box-shadow: 2px 2px 2px #ddd;\n  text-align: center;\n  font-size: 0.6em;\n  margin: 0.5em;\n\n  background-image: url(\"./images/tree_card.png\"); \n  background-repeat: no-repeat;\n  background-size: 3.1em;\n  background-position: left 1em bottom .8em;\n\n  @media (min-width: 375px) {\n    font-size: 0.8em;\n  }\n\n  @media (min-width: 768px) {\n    width: 300px;\n    margin: 1em;\n  }\n`\n\nexport const activeClass = css`\n  border: 1px solid ${RED};\n  label {\n    font-weight: 600;\n  }\n`\n\nexport const bigTree = css`\n  background-size: 3.6em;\n`\n\nexport const title = css`\n  color: ${RED};\n  font-weight: 500;\n\n  font-size: 16px;\n\n  @media (min-width: 375px) {\n    font-size: 18px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.5em;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n  margin: 0 20px;\n\n  @media (min-width: 375px) {\n    margin: 0 40px;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 4em;\n  }\n`","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport * as trees from '../trees'\nimport * as styles from './styles'\n\nexport const TreeTile = ({ tree = {}, selectTree }) => {\n\n  const {\n    name,\n    height = '',\n    price = '',\n    selected,\n  } = tree\n\n  let tilesClasses = classNames({\n    [styles.treeTile] : true,\n    [styles.activeClass] : !!selected,\n    [styles.bigTree]: name === trees.LARGE_TREE_NAME,\n  })\n\n  return (\n    <>\n      <div className={tilesClasses} \n          onClick={() => {selectTree(tree)}}\n      >\n        <label className={styles.title}>{name}</label>\n        <div>{height}</div>\n        <hr className={styles.hr}/>\n        <div>{`$${price}`}</div>\n      </div>\n    </>\n  )\n}\n\nexport default TreeTile\n\nTreeTile.propTypes = {\n  tree: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  selectTree: PropTypes.func,\n}\n","import { css } from 'emotion'\n\nexport const input = css`\n  margin-right: 0.4em;\n`\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nconst Checkbox = ({ \n  type = 'checkbox', \n  name, \n  checked = false, \n  disabled = false,\n  onChange \n}) => { \n  return (\n    <input \n      className={styles.input}\n      type={type} \n      name={name} \n      checked={checked} \n      disabled={disabled}\n      onChange={onChange} \n    />\n  )\n}\n\n\nCheckbox.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Checkbox","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const datesSelect = css`\n  border: 1px solid ${CTA};\n  color: ${RED} !important;\n  line-height: 1.3;\n  padding: .6em 1.4em .5em .8em;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto 1em;\n  border: 1px solid #aaa;\n  box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n  border-radius: .5em;\n\n  @media (min-width: 768px) {\n    width: 80%;\n    max-width: 80%;\n  }\n\n`\n\nexport const calendar = css`\n  \n    td.CalendarDay__selected, \n    td.CalendarDay__selected:active, \n    td.CalendarDay__selected:hover {\n        border: 1px double ${CTA} !important;\n        background: ${CTA} !important;\n    }\n\n    .DayPicker {\n        margin: .6em auto 1em;\n    }\n\n    label {\n        color: ${CTA};\n        margin: .6em auto;\n        font-size: 1.2em;\n    }\n\n    margin: 1em auto 0;\n    text-align: center;\n\n`\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { DayPickerSingleDateController } from 'react-dates'\nimport moment from 'moment'\nimport * as styles from './styles'\n\nexport default class DatesField extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const { deliveryDate } = this.props\n\n    this.state = {\n      date: deliveryDate,\n      focused: true,\n      daySize: 35,\n    }\n\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    const { daySize } = this.state\n    let newSize = daySize\n    if ( window.innerWidth <= 325 ) {\n      newSize = 29\n    } else if ( window.innerWidth < 400 ) {\n      newSize = 35\n    } else {\n      newSize = 39\n    }\n    \n    if (daySize === newSize) {\n      return\n    }\n    this.setState({ daySize: newSize })\n  }\n\n  componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.deliveryDate !== prevProps.deliveryDate) {\n      this.setState({ \n        date: this.props.deliveryDate\n      })\n    }\n  }\n\n  onDateChange(date) {\n    const { onDeliveryDateChange } = this.props\n    onDeliveryDateChange(date)\n    this.setState({ date })\n  }\n\n  onFocusChange() {\n    // Force the focused states to always be truthy so that date is always selectable\n    this.setState({ focused: true })\n  }\n\n  isBlocked = (availableDays, day) => {\n    return !availableDays.find(d => d === day.date())\n  }\n\n  render() {\n    const { focused, daySize, date } = this.state\n    const { availableDays = [] } = this.props\n    const isDayBlocked = (day) => this.isBlocked(availableDays, day)\n    return (\n      <div className={styles.calendar}>\n        <label>Delivery Date</label>\n        <DayPickerSingleDateController\n          numberOfMonths={1} \n          focused={focused}\n          date={date}\n          daySize={daySize}\n          initialVisibleMonth={() => moment('12 2020', 'MM YYYY')}\n          isDayBlocked={isDayBlocked}\n          noNavButtons={true}\n          hideKeyboardShortcutsPanel={true}\n          onDateChange={this.onDateChange}\n          onFocusChange={this.onFocusChange}\n        />\n        \n      </div>\n    );\n    }\n  }\n  \n  DatesField.propTypes = {\n    onDeliveryDateChange: PropTypes.func.isRequired,\n    availableDays: PropTypes.array,\n    deliveryDate: PropTypes.shape(),\n  }\n  ","import { css } from 'emotion'\nimport { CTA } from '../../colorConsts'\n\nexport const postcode = css`\n  border: 1px solid ${CTA};\n  \n  line-height: 1.3em;\n  padding: .6em 1.4em .5em .8em;\n  width: 8em;\n  max-width: 80%;\n  box-sizing: border-box;\n  margin: 1em auto 0;\n  border-radius: 6px;\n\n`\n\nexport const label = css`\n  color: ${CTA};\n  box-sizing: border-box;\n  margin: 1em;\n  width: 6em;\n  font-size: 1.2em;\n  line-height: 2em;\n\n`\n\nexport const error = css`\n  font-size: 0.9em;\n  line-height: 1.6em;\n  margin: 1em 0;\n\n  @media (min-width: 768px) {\n    font-size: 0.9em;\n    margin: .5em 0;\n  }\n\n  a {\n    font-size: 0.9em;\n    line-height: 1.6em;\n    font-weight: 600;\n\n    @media (min-width: 768px) {\n      font-weight: 500;\n    }\n  }\n`\n\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nexport default class PostCodeInput extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      valid: true,\n      isMissingPostcode: false,\n      areaSurcharge: false,\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n    handleChange = (event) => {\n      const number = Number(event.target.value)\n      const { onPostCodeChange } = this.props\n      if (isNaN(number)) {\n        return\n      } \n\n      const valid = (number/1000 | 0) === 3\n\n      let isMissingPostcode = false\n      const { postcodes } = this.props\n      const postCodeEnum = postcodes.find(c => c.code === number) \n      if(valid) {\n        isMissingPostcode = !postCodeEnum\n      }\n      const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n      onPostCodeChange(number, valid)\n      this.setState({ \n        value: number,\n        valid,\n        isMissingPostcode,\n        areaSurcharge,\n      })\n    }\n  \n    render() {\n      const { valid, value, isMissingPostcode, areaSurcharge } = this.state\n  \n      return (\n        <>\n          <label className={styles.label}>Postcode</label>\n          <input \n            className={styles.postcode}\n            type=\"text\" pattern=\"[0-9]{4}\"\n            maxLength={4} minLength={4}\n            placeholder=\"3000\"\n            name=\"title\" value={value} \n            onChange={this.handleChange.bind(this)}\n            />\n          {areaSurcharge && <p className={styles.error}>Delivery area surcharge of $25 has been applied for selected postcode</p>}\n          {!valid && <p className={styles.error}>Please enter a valid Victorian postcode.</p>}\n          {isMissingPostcode && (\n            <p className={styles.error}>\n              {`Oops! It looks like ${value} is out of our delivery range, please call us on `}\n                <a href=\"tel:0411399607\">0411399607</a>\n              {` for delivery quote to your area.`}\n          </p>\n          )}\n\n          </>\n      );\n    }\n  }\n  \n  PostCodeInput.propTypes = {\n    onPostCodeChange: PropTypes.func.isRequired,\n  }","export const STAND_KEY = 'cincostand'\n\nexport const ADDITIONAL_ITEMS = [{\n        name: 'cincostand',\n        key: 'cincostand',\n        label: 'Cinco Stand',\n        price: 45,\n        large: {\n          name: 'largecincostand',\n          label: 'Large Cinco Stand',\n          price: 60,\n        },\n      },\n      {\n        name: 'installation',\n        key: 'installation',\n        label: 'Installation',\n        price: 20,\n      },\n      {\n        name: 'wateringkit',\n        key: 'wateringkit',\n        label: 'Watering Kit',\n        price: 25,\n      },\n      {\n        name: 'disposal',\n        key: 'disposal',\n        label: 'Disposal',\n        price: 15,\n      },\n      {\n        name: 'preservative',\n        key: 'preservative',\n        label: 'Preservative',\n        price: 5,\n      },\n]","import * as postcodes_json from './zones.json'\n\nexport const WEEKEND_SURCHARGE = 25\nexport const AREA_SURCHARGE = 25\n\nexport const ZONES = {\n    C1 : {\n        name: 'C1',\n        areaSurcharge: true,\n        availableDates: [1,2,5,6,8,9,12,13,15,16,19,20],\n    },\n    E : {\n        name: 'E',\n        areaSurcharge: false,\n        availableDates: [1,2,5,6,8,9],\n    },\n    E1 : {\n        name: 'E1',\n        areaSurcharge: true,\n        availableDates: [1,2,5,6,8,9],\n    },\n    N : {\n        name: 'N',\n        areaSurcharge: false,\n        availableDates: [1, 2, 3],\n    },\n    N1 : {\n        name: 'N1',\n        areaSurcharge: true,\n        availableDates: [1, 2, 3],\n    },\n    S : {\n        name: 'S',\n        areaSurcharge: false,\n        availableDates: [8,9,12,13],\n    },\n    S1 : {\n        name: 'S1',\n        areaSurcharge: true,\n        availableDates: [8,9,12,13],\n    },\n    W : {\n        name: 'W',\n        areaSurcharge: false,\n        availableDates: [15,16,19,20],\n    },\n    W1 : {\n        name: 'W1',\n        areaSurcharge: true,\n        availableDates: [15,16,19,20],\n    },\n}\n\n\n/**\n * reads postcodes from a Json file.\n * returns an array of postcodes, each element is in form\n * {\n    code: 3000,\n    zone: ZONES.C1\n}\n */\nexport const fetchPostCodesFromJson = () => {\n    if (!postcodes_json) {\n        return\n    }\n    const postcodes = postcodes_json.default.map((p) => {\n        return {\n            code: p.postcode,\n            zone: ZONES[`${p.Zone}${!!p.surcharge ? p.surcharge : ''}`]\n        }\n    })\n    // console.dir(postcodes)\n    return postcodes\n}","import { css } from 'emotion'\nimport { RED, PALE_GREEN, CTA, DARK_GREEN } from '../colorConsts'\n\nexport const tilesWpap = css`\n  padding: 8px 0;\n  display: flex;\n  justify-content: center;\n  margin: 0 auto;\n\n  @media (min-width: 768px) {\n\n  }\n`\n\nexport const checkboxesWpap = css`\n  margin: 0 auto 1em;\n  text-align: left;\n  width: 11em;\n\n  @media (min-width: 420px) {\n    width: 9em;\n  }\n`\n\nexport const checkboxLabel = css`\n  color: ${RED};\n  overflow: visible;\n  white-space: nowrap;\n  font-size: 1.2em;\n  line-height: 1.8em;\n\n  span {\n    color: #666;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n`\n\n\nexport const h2 = css`\n  color: ${CTA};\n  text-transform: none;\n  line-height: 2em;\n  margin: 0;\n  font-weight: 500;\n\n`\n\nexport const boxWpap = css`\n  padding: 1em;\n  text-align: center;\n  border: 1px solid green;\n  background-color: ${PALE_GREEN};\n  margin: 1em auto 0;\n\n  @media (min-width: 768px) {\n    width: 500px;\n  }\n  \n`\n\nexport const cta = css`\n  width: 100%;\n  margin: 1em auto;\n  background-color: ${CTA};\n  font-size: 1em;\n\n  :active, :hover, :visited, :focus{\n    background-color: ${CTA};\n  }\n\n  :disabled{\n    background-color: #aaa;\n  }\n\n  @media (min-width: 768px) {\n    margin: 1em auto;\n    width: 12em;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 1.1em;\n\n  @media (min-width: 768px) {\n    font-size: 1em;\n  }\n`","import React from 'react'\nimport TreeTile from './treeTile'\nimport Checkbox from './checkbox'\nimport DatesField from './datesField'\nimport PostCodeInput from './postCodeInput'\nimport { TREES, LARGE_TREE_NAME } from './trees'\nimport { ADDITIONAL_ITEMS, STAND_KEY } from './additionalItems'\nimport {  \n  WEEKEND_SURCHARGE, \n  AREA_SURCHARGE, \n  fetchPostCodesFromJson\n} from './zones'\nimport * as styles from './styles'\n\nclass TreesForm extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const defaultTree = TREES[0] || {}\n    const defaultAdditionalSelection = ADDITIONAL_ITEMS[0] || {}\n    const postcodes = fetchPostCodesFromJson()\n\n    this.state = {\n      trees: TREES,\n      selectedTree: defaultTree,\n      checkedItemsSet: new Set([defaultAdditionalSelection]),\n      disabledItemsSet: new Set(),\n      total: defaultTree.price + defaultAdditionalSelection.price,\n      postcodes,\n      areaSurcharge: false,\n      dateSurcharge: false,\n      postCode: null,\n      deliveryDate: null,\n      isFormValid: true,\n      formErrorMessage: \"Please enter a valid PostCode and select a delivery date\",\n    }\n\n    this.selectTree = this.selectTree.bind(this)\n    this.onAdditionalItemsChange = this.onAdditionalItemsChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onDeliveryDateChange = this.onDeliveryDateChange.bind(this)\n    this.onPostCodeChange = this.onPostCodeChange.bind(this)\n  }\n\n  selectTree(tree) {\n    this.setState(state => {\n      const trees = state.trees.map(item => {\n        return {...item, selected: item.name === tree.name}\n      })\n      return {\n        ...state, \n        trees: trees, \n        selectedTree : tree,\n        total: this.getTotal({tree:tree}) \n      }\n    })\n  }\n\n  getTotal({\n    tree = this.state.selectedTree,\n    checkedItems = [...this.state.checkedItemsSet],\n    dateSurcharge = this.state.dateSurcharge,\n    areaSurcharge = this.state.areaSurcharge,\n  }) {\n    const additinalItemsPrice = checkedItems.reduce((sum, item) => { \n        if (this.isAddedItemLargeStand(item)) {\n          return sum + item.large.price \n        }\n        return sum + item.price \n      }, 0\n    )\n    const areaPrice = areaSurcharge && AREA_SURCHARGE\n    const datePrice = dateSurcharge && WEEKEND_SURCHARGE\n\n    return tree.price + additinalItemsPrice + datePrice + areaPrice\n  }\n\n  onDeliveryDateChange(deliveryDate) { \n    const dateSurcharge = deliveryDate && (deliveryDate.day() % 6 === 0)\n    this.setState((state) => ({ \n      ...state,\n      deliveryDate,\n      dateSurcharge, \n      isFormValid: this.isFormValid({ deliveryDate }),\n      total: this.getTotal({ dateSurcharge }),\n    }))\n  }\n\n  onPostCodeChange(postCode, valid) { \n    const { deliveryDate, postcodes, postCode: prevPostCode } = this.state\n\n    if (!valid && prevPostCode) { \n      this.setState((state) => ({ \n        ...state,\n        postCode: null,\n        isFormValid: false,\n        total: this.getTotal({ areaSurcharge: false }),\n      }))\n      return\n    }\n    const postCodeEnum = postcodes.find(c => c.code === postCode)\n    const availableDates = postCodeEnum ? postCodeEnum.zone.availableDates : []\n    const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n    let newDeliveryDate = deliveryDate\n    // if deliveryDate is selected, but not in avaiable dates, set to null\n    if (deliveryDate && !availableDates.find(d => d === deliveryDate.date())){\n      newDeliveryDate = null\n    }\n\n    if (!postCodeEnum) {\n      \n    }\n\n    this.setState((state) => ({ \n      ...state,\n      postCode,\n      areaSurcharge,\n      availableDates,\n      isFormValid: this.isFormValid({ deliveryDate: newDeliveryDate, postCode }),\n      deliveryDate: newDeliveryDate,\n      total: this.getTotal({ areaSurcharge }),\n    }))\n  }\n\n  onAdditionalItemsChange(e) {\n    const { checkedItemsSet, disabledItemsSet } = this.state\n    const { name : itemName , checked : isChecked} = e.target\n\n    const item = ADDITIONAL_ITEMS.find(i => i.name === itemName)\n\n    if (!isChecked) {\n      checkedItemsSet.delete(item)\n    } else {\n      checkedItemsSet.add(item)\n    }\n    this.updateInstallation(isChecked, itemName, checkedItemsSet, disabledItemsSet)\n\n    this.setState((state) => ({ \n      ...state,\n      checkedItemsSet,\n      total: this.getTotal({checkedItems:  [...checkedItemsSet]}),\n    }));\n  }\n\n  updateInstallation(isChecked, itemName, checkedItemsSet, disabledItemsSet) {\n    if (!itemName.includes(STAND_KEY)) { \n      return\n    }\n    const installation = ADDITIONAL_ITEMS.find(i => i.name === 'installation')\n    if (isChecked) {\n      disabledItemsSet.delete(installation)\n    } else {\n      checkedItemsSet.delete(installation)\n      disabledItemsSet.add(installation)\n    }\n  }\n\n  getLabelText(item) {\n    return <>{item.label} <span>{`+$${item.price}`}</span></>\n  }\n\n  isFormValid ({ \n    deliveryDate = this.state.deliveryDate, \n    postCode = this.state.postCode,\n  }) {\n    return !!postCode && !!deliveryDate\n  }\n\n  isAddedItemLargeStand(item) {\n    const { selectedTree } = this.state\n    return item.key === STAND_KEY && selectedTree.name === LARGE_TREE_NAME\n  }\n\n  onSubmit(e) {\n\n    console.log(e.target.tree.value)\n    console.log(e.target.addOns.value)\n    console.log(e.target.postcode.value)\n    console.log(e.target.deliveryDay.value)\n    console.log(e.target.areaSurcharge.value)\n    console.log(e.target.weekendSurcharge.value)\n    console.log(e.target.total.value)\n  }\n\n  render() {\n    const { \n      trees, \n      total, \n      checkedItemsSet, \n      disabledItemsSet, \n      availableDates,\n      deliveryDate,\n      isFormValid,\n      formErrorMessage,\n      postcodes,\n      postCode,\n      selectedTree,\n      areaSurcharge,\n      dateSurcharge,\n    } = this.state\n\n    const treesList = trees.map(tree => (\n      <TreeTile tree={tree} key={tree.name} selectTree={this.selectTree}/>\n    ))\n\n    const checkboxes = ADDITIONAL_ITEMS.map(item => {\n      let labelText = this.getLabelText( \n        this.isAddedItemLargeStand(item) ? item.large : item\n      )\n\n      return (\n        <div key={item.key}>\n          <label className={styles.checkboxLabel}>\n            <Checkbox \n              name={item.name} \n              checked={checkedItemsSet.has(item)} \n              disabled={disabledItemsSet.has(item)} \n              onChange={this.onAdditionalItemsChange} \n            />\n            {labelText}\n          </label>\n        </div>\n    )})\n    \n    const additionalItemsNames = [...checkedItemsSet].map(i => {\n      if (this.isAddedItemLargeStand(i)){\n        return i.large.name\n      }\n      return i.name\n    })\n\n    return (\n      <form \n        className={styles.boxWpap} \n        name=\"trees\"  \n        method=\"post\"  \n        action=\"/checkout\" \n        onSubmit={this.onSubmit}\n      >\n        <input name=\"tree\" value={selectedTree.name || ''} type=\"hidden\"/>\n        <input name=\"addOns\" value={additionalItemsNames || []} type=\"hidden\"/>\n        <input name=\"postcode\" value={postCode || 0} type=\"hidden\"/>\n        <input name=\"deliveryDay\" value={deliveryDate ? deliveryDate.date() : 0} type=\"hidden\"/>\n        <input name=\"areaSurcharge\" value={!!areaSurcharge || false} type=\"hidden\"/>\n        <input name=\"weekendSurcharge\" value={!!dateSurcharge || false} type=\"hidden\"/>\n        <input name=\"total\" value={total || 0} type=\"hidden\"/>\n\n        <h2 className={styles.h2}>Order now</h2>\n        <hr className={styles.hr}/>\n        <div className={styles.tilesWpap}>\n          {treesList}\n        </div>\n        <div className={styles.checkboxesWpap}>\n          {checkboxes}\n        </div>\n        <hr className={styles.hr}/>\n        <div className={styles.subTextGreen}>\n          Delivery starts in December. Please note! Additional surcharge may be applied for CBD, remote suburbs and weekend deliveries.\n        </div>\n        <PostCodeInput \n          postcodes={postcodes}\n          onPostCodeChange={this.onPostCodeChange}/>\n        <DatesField \n          onDeliveryDateChange={this.onDeliveryDateChange}\n          availableDays={availableDates}\n          deliveryDate={deliveryDate}\n        />\n        <hr className={styles.hr}/>\n        <button \n          type=\"submit\"\n          className={styles.cta} \n          disabled={!isFormValid}\n        >\n            {`Buy for $${total}`}\n        </button>\n        <p>{!isFormValid && formErrorMessage}</p>\n      </form>\n    )\n  }\n}\n\n\n\nexport default TreesForm\n\nTreesForm.propTypes = {\n\n}\n","import { css } from 'emotion'\nimport { RED, DARK_GREEN, YELLOW } from './colorConsts'\n\nexport const pageWpap = css`\n  &&& {\n    @media (min-width: 768px) {\n      font-size: 20px;\n      line-height: 26px;\n    }\n  }\n  padding: 20px;\n  text-align: center;\n  width: 100%;\n  background-image: url(\"./images/mobile_bg.png\"); \n  background-repeat: no-repeat;\n  background-size: 100%;\n\n  @media (min-width: 600px) {\n   background-image: url(\"./images/bg.png\"); \n  }\n`\n\nexport const specialOffer = css`\n  color: ${YELLOW};\n  background-color: ${RED};\n  width: 90%;\n  margin: 2vw auto 0;\n  padding: 0.4em 0.4em 0.4em 4em;\n  font-size: 0.8em;\n  line-height: 1.2em;\n  border: 1px solid #fff;\n  position: relative;\n\n  span {\n    font-size: 0.8em;\n    line-height: 1.2em;\n    color: ${YELLOW};\n  }\n\n  ::after {\n    content: \"\";\n    background-image: url(\"./images/bells.png\"); \n    background-repeat: no-repeat;\n    position: absolute;\n    background-size: 110px;\n    top:-20px;\n    left: -40px;\n    height: 130px;\n    width: 110px;\n\n    @media (min-width: 768px) {\n      background-image: url(\"./images/bells_desktop.png\"); \n      background-size: 15vw; \n      top:-2.4vw;\n      left: -10vw;\n      height: 18vw; \n      width: 15vw; \n    }\n  }\n\n  @media (min-width: 500px) {\n    width: 28em;\n    padding: 0.5em 0.5em 0.5em 3em;\n  }\n\n  @media (min-width: 768px) {\n    width: 24em;\n    font-size: 1.6vw;\n    line-height: 2vw;\n    padding: 0.5em 0.5em 0.5em 2.2em;\n\n    span {\n      font-size: 0.75em;\n    }\n  }\n`\n\nexport const subTextRed = css`\n  color: ${RED};\n  width: 100%;\n  margin: 11em auto 1em;\n  font-size: 0.9em;\n\n  @media (min-width: 360px) {\n    margin: 0 auto 11em;\n  }\n\n  @media (min-width: 400px) {\n    margin: 0 auto 12em;\n  }\n\n  @media (min-width: 480px) {\n    font-size: 1.1em;\n    width: 28em;\n  }\n\n  @media (min-width: 768px) {\n    width: 50vw;\n    font-size: 1.7vw;\n    line-height: 2vw;\n    margin: 0 auto 26vw;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 0.9em;\n\n  @media (min-width: 500px) {\n    width: 32em;\n  }\n`\n\nexport const h1 = css`\n  color: ${RED};\n  font-size: 2.2em;\n  font-family: 'Fondamento', cursive;\n  margin: 2vw auto 0;\n  overflow: hiddlen;\n  white-space: nowrap;\n\n  @media (min-width: 400px) {\n    font-size: 2.8em;\n  }\n\n  @media (min-width: 500px) {\n    font-size: 4em;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 7vw;\n  }\n`\n\nexport const car = css`\n  background-image: url(\"./images/truck_new.png\"); \n  background-repeat: no-repeat;\n  height: 179px;\n  width: 300px;\n  margin: 0 auto;\n`\n","import React from 'react'\nimport TreesForm from './treesForm'\nimport * as styles from './styles'\n\nconst PrimaryLayout = () => (\n  <div className={styles.pageWpap}>\n  {/* <a className=\"facebook\" href=\"https://www.facebook.com/Jinglesxmt\" target=\"_blank\" rel=\"noopener noreferrer\">Follow us</a> */}\n    <div className={styles.specialOffer}>\n      Standard Tree with Cinco stand for $154\n      <br/>\n      <span>including delivery in Melbourne Area during the week.</span>\n    </div>\n    <h1 className={styles.h1}>\n      Jingles Xmas Trees\n    </h1>\n    <div className={styles.subTextRed}>\n      Are you looking for a real Christmas tree to make your Christmas spectacular? You just found it! Save with our special offer.\n    </div>\n    <div className={styles.subTextGreen}>\n      Our trees are sustainably grown on a farm in Dalesford (VIC).\n      With delivery, setup and disposal, you get it all covered.\n    </div>\n    <TreesForm></TreesForm>\n    <div className={styles.car}></div>\n  </div>\n)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: undefined\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ done: true })\n    }, 200);\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.done ? (\n          <PrimaryLayout />\n        ) : (\n          <h1 className=\"loading\">Jingles Xmas Trees</h1>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'react-dates/initialize'\nimport 'react-dates/lib/css/_datepicker.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}